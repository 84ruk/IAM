#!/bin/bash

# Script de auditor√≠a de seguridad para IAM System
echo "üîí Auditor√≠a de Seguridad - IAM System"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar mensajes
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Contador de problemas
ISSUES=0
CRITICAL_ISSUES=0

echo ""
print_info "üîç Iniciando auditor√≠a de seguridad..."
echo ""

# 1. Verificar archivos de configuraci√≥n
print_status "1. Verificando archivos de configuraci√≥n..."

# Verificar si .env est√° en .gitignore
if grep -q "\.env" .gitignore; then
    print_success "‚úÖ .env est√° en .gitignore"
else
    print_error "‚ùå .env NO est√° en .gitignore"
    ((CRITICAL_ISSUES++))
fi

# Verificar si .env existe y tiene credenciales reales
if [ -f ".env" ]; then
    if grep -q "usuario:contrase√±a" .env; then
        print_warning "‚ö†Ô∏è  .env contiene credenciales de ejemplo"
        ((ISSUES++))
    else
        print_success "‚úÖ .env existe y no contiene credenciales de ejemplo"
    fi
    
    # Verificar permisos del archivo .env
    PERMS=$(stat -f "%Lp" .env 2>/dev/null || stat -c "%a" .env 2>/dev/null)
    if [ "$PERMS" = "600" ]; then
        print_success "‚úÖ .env tiene permisos correctos (600)"
    else
        print_warning "‚ö†Ô∏è  .env no tiene permisos seguros (actual: $PERMS, recomendado: 600)"
        ((ISSUES++))
    fi
else
    print_warning "‚ö†Ô∏è  Archivo .env no encontrado"
    ((ISSUES++))
fi

echo ""

# 2. Verificar credenciales hardcodeadas
print_status "2. Verificando credenciales hardcodeadas..."

# Buscar posibles credenciales en el c√≥digo
HARDCODED_CREDS=$(grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" src/ 2>/dev/null | grep -v "example\|test\|TODO\|FIXME" | grep -E "(password|secret|key|token)" || true)

if [ -n "$HARDCODED_CREDS" ]; then
    print_error "‚ùå Se encontraron posibles credenciales hardcodeadas:"
    echo "$HARDCODED_CREDS" | head -5
    if [ $(echo "$HARDCODED_CREDS" | wc -l) -gt 5 ]; then
        echo "... y $(($(echo "$HARDCODED_CREDS" | wc -l) - 5)) m√°s"
    fi
    ((CRITICAL_ISSUES++))
else
    print_success "‚úÖ No se encontraron credenciales hardcodeadas"
fi

echo ""

# 3. Verificar dependencias de seguridad
print_status "3. Verificando dependencias..."

# Verificar si npm audit est√° disponible
if command -v npm &> /dev/null; then
    print_info "Ejecutando npm audit en el backend..."
    cd iam-backend
    AUDIT_RESULT=$(npm audit --audit-level=moderate 2>&1 || true)
    if echo "$AUDIT_RESULT" | grep -q "found 0 vulnerabilities"; then
        print_success "‚úÖ Backend: No se encontraron vulnerabilidades cr√≠ticas"
    else
        print_warning "‚ö†Ô∏è  Backend: Se encontraron vulnerabilidades"
        echo "$AUDIT_RESULT" | grep -E "(High|Critical)" | head -3
        ((ISSUES++))
    fi
    cd ..
    
    print_info "Ejecutando npm audit en el frontend..."
    cd iam-frontend
    AUDIT_RESULT=$(npm audit --audit-level=moderate 2>&1 || true)
    if echo "$AUDIT_RESULT" | grep -q "found 0 vulnerabilities"; then
        print_success "‚úÖ Frontend: No se encontraron vulnerabilidades cr√≠ticas"
    else
        print_warning "‚ö†Ô∏è  Frontend: Se encontraron vulnerabilidades"
        echo "$AUDIT_RESULT" | grep -E "(High|Critical)" | head -3
        ((ISSUES++))
    fi
    cd ..
else
    print_warning "‚ö†Ô∏è  npm no est√° disponible para verificar dependencias"
    ((ISSUES++))
fi

echo ""

# 4. Verificar configuraci√≥n de Docker
print_status "4. Verificando configuraci√≥n de Docker..."

if [ -f "docker-compose.yml" ]; then
    # Verificar si hay credenciales hardcodeadas en docker-compose
    if grep -q "password\|secret\|key" docker-compose.yml | grep -v "POSTGRES_PASSWORD\|JWT_SECRET" | grep -v "\\$"; then
        print_warning "‚ö†Ô∏è  Posibles credenciales hardcodeadas en docker-compose.yml"
        ((ISSUES++))
    else
        print_success "‚úÖ docker-compose.yml no contiene credenciales hardcodeadas"
    fi
else
    print_warning "‚ö†Ô∏è  docker-compose.yml no encontrado"
    ((ISSUES++))
fi

echo ""

# 5. Verificar configuraci√≥n de seguridad en el c√≥digo
print_status "5. Verificando configuraci√≥n de seguridad en el c√≥digo..."

# Verificar si hay CORS configurado
if grep -r "cors\|CORS" --include="*.ts" --include="*.js" src/ | grep -v "test" > /dev/null; then
    print_success "‚úÖ CORS est√° configurado"
else
    print_warning "‚ö†Ô∏è  CORS no parece estar configurado"
    ((ISSUES++))
fi

# Verificar si hay rate limiting
if grep -r "rate.*limit\|throttle" --include="*.ts" --include="*.js" src/ | grep -v "test" > /dev/null; then
    print_success "‚úÖ Rate limiting est√° configurado"
else
    print_warning "‚ö†Ô∏è  Rate limiting no parece estar configurado"
    ((ISSUES++))
fi

# Verificar si hay validaci√≥n de entrada
if grep -r "validation\|validate\|class-validator" --include="*.ts" --include="*.js" src/ | grep -v "test" > /dev/null; then
    print_success "‚úÖ Validaci√≥n de entrada est√° configurada"
else
    print_warning "‚ö†Ô∏è  Validaci√≥n de entrada no parece estar configurada"
    ((ISSUES++))
fi

echo ""

# 6. Verificar archivos sensibles
print_status "6. Verificando archivos sensibles..."

SENSITIVE_FILES=(".env" ".env.local" ".env.production" "*.pem" "*.key" "*.crt" "ssl/")

for pattern in "${SENSITIVE_FILES[@]}"; do
    if find . -name "$pattern" -type f 2>/dev/null | grep -v node_modules > /dev/null; then
        print_warning "‚ö†Ô∏è  Se encontraron archivos sensibles: $pattern"
        find . -name "$pattern" -type f 2>/dev/null | grep -v node_modules | head -3
        ((ISSUES++))
    fi
done

echo ""

# 7. Verificar configuraci√≥n de base de datos
print_status "7. Verificando configuraci√≥n de base de datos..."

if [ -f "iam-backend/prisma/schema.prisma" ]; then
    # Verificar si hay √≠ndices en campos sensibles
    if grep -q "@unique\|@index" iam-backend/prisma/schema.prisma; then
        print_success "‚úÖ Se encontraron √≠ndices en el schema de Prisma"
    else
        print_warning "‚ö†Ô∏è  No se encontraron √≠ndices en el schema de Prisma"
        ((ISSUES++))
    fi
else
    print_warning "‚ö†Ô∏è  Schema de Prisma no encontrado"
    ((ISSUES++))
fi

echo ""

# Resumen de la auditor√≠a
print_status "üìä Resumen de la auditor√≠a de seguridad:"
echo ""

if [ $CRITICAL_ISSUES -eq 0 ] && [ $ISSUES -eq 0 ]; then
    print_success "üéâ ¬°Excelente! No se encontraron problemas cr√≠ticos de seguridad"
    print_success "‚úÖ Tu proyecto cumple con las mejores pr√°cticas de seguridad"
elif [ $CRITICAL_ISSUES -eq 0 ]; then
    print_warning "‚ö†Ô∏è  Se encontraron $ISSUES problemas menores de seguridad"
    print_info "Recomendamos revisar y corregir estos problemas"
else
    print_error "‚ùå Se encontraron $CRITICAL_ISSUES problemas cr√≠ticos y $ISSUES problemas menores"
    print_error "üö® Se requiere atenci√≥n inmediata a los problemas cr√≠ticos"
fi

echo ""
print_info "üîß Recomendaciones generales:"
echo "‚Ä¢ Usa variables de entorno para todas las credenciales"
echo "‚Ä¢ Implementa rate limiting en todas las APIs"
echo "‚Ä¢ Configura CORS correctamente"
echo "‚Ä¢ Usa HTTPS en producci√≥n"
echo "‚Ä¢ Rota las claves JWT regularmente"
echo "‚Ä¢ Monitorea logs y acceso al sistema"
echo "‚Ä¢ Configura backups autom√°ticos"
echo "‚Ä¢ Mant√©n las dependencias actualizadas"
echo ""

print_status "üîí Auditor√≠a completada" 