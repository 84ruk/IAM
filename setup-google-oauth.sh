#!/bin/bash

# Script para configurar Google OAuth - IAM System
echo "üîê Configurador de Google OAuth - IAM System"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar mensajes
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

echo ""
print_info "üîê Configurando Google OAuth para tu aplicaci√≥n..."
echo ""

print_status "üìã Pasos para configurar Google OAuth:"
echo ""

print_info "1. Crear proyecto en Google Cloud Console:"
echo "   ‚Ä¢ Ve a: https://console.cloud.google.com/"
echo "   ‚Ä¢ Crea un nuevo proyecto o selecciona uno existente"
echo ""

print_info "2. Habilitar Google+ API:"
echo "   ‚Ä¢ Ve a: APIs & Services > Library"
echo "   ‚Ä¢ Busca 'Google+ API' y habil√≠tala"
echo ""

print_info "3. Crear credenciales OAuth 2.0:"
echo "   ‚Ä¢ Ve a: APIs & Services > Credentials"
echo "   ‚Ä¢ Haz clic en 'Create Credentials' > 'OAuth 2.0 Client IDs'"
echo "   ‚Ä¢ Selecciona 'Web application'"
echo ""

print_info "4. Configurar URIs autorizados:"
echo "   ‚Ä¢ Authorized JavaScript origins:"
echo "     - http://localhost:3000 (desarrollo)"
echo "     - https://tu-frontend-url.com (producci√≥n)"
echo ""

print_info "5. Configurar URIs de redirecci√≥n:"
echo "   ‚Ä¢ Authorized redirect URIs:"
echo "     - http://localhost:3001/auth/google/callback (desarrollo)"
echo "     - https://tu-backend-url.com/auth/google/callback (producci√≥n)"
echo ""

echo ""
print_warning "‚ö†Ô∏è  IMPORTANTE: Guarda el Client ID y Client Secret que te proporciona Google"
echo ""

# Solicitar credenciales al usuario
echo ""
print_status "üîë Ingresa las credenciales de Google OAuth:"
echo ""

read -p "Client ID: " GOOGLE_CLIENT_ID
read -p "Client Secret: " GOOGLE_CLIENT_SECRET

# Validar que se ingresaron las credenciales
if [ -z "$GOOGLE_CLIENT_ID" ] || [ -z "$GOOGLE_CLIENT_SECRET" ]; then
    print_error "‚ùå Las credenciales no pueden estar vac√≠as"
    exit 1
fi

# Determinar el entorno
read -p "¬øEst√°s en desarrollo? (y/n): " IS_DEV

if [[ $IS_DEV =~ ^[Yy]$ ]]; then
    GOOGLE_CALLBACK_URL="http://localhost:3001/auth/google/callback"
    print_info "Configurando para desarrollo..."
else
    read -p "URL de tu backend (ej: https://tu-backend.com): " BACKEND_URL
    GOOGLE_CALLBACK_URL="${BACKEND_URL}/auth/google/callback"
    print_info "Configurando para producci√≥n..."
fi

echo ""
print_status "üìù Actualizando archivo .env..."

# Verificar si existe el archivo .env
if [ ! -f ".env" ]; then
    print_warning "Archivo .env no encontrado. Creando desde .env.example..."
    cp env.example .env
fi

# Actualizar variables de Google OAuth en .env
sed -i.bak "s/GOOGLE_CLIENT_ID=.*/GOOGLE_CLIENT_ID=\"$GOOGLE_CLIENT_ID\"/" .env
sed -i.bak "s/GOOGLE_CLIENT_SECRET=.*/GOOGLE_CLIENT_SECRET=\"$GOOGLE_CLIENT_SECRET\"/" .env
sed -i.bak "s|GOOGLE_CALLBACK_URL=.*|GOOGLE_CALLBACK_URL=\"$GOOGLE_CALLBACK_URL\"|" .env

# Limpiar archivo de backup
rm -f .env.bak

print_success "‚úÖ Variables de Google OAuth configuradas en .env"
echo ""

print_status "üîß Configuraci√≥n completada:"
echo "   ‚Ä¢ Client ID: $GOOGLE_CLIENT_ID"
echo "   ‚Ä¢ Callback URL: $GOOGLE_CALLBACK_URL"
echo ""

print_info "üìã Pr√≥ximos pasos:"
echo "1. Reinicia tu servidor backend"
echo "2. Prueba el login con Google desde tu frontend"
echo "3. Verifica que las redirecciones funcionen correctamente"
echo ""

print_warning "üîí RECORDATORIOS DE SEGURIDAD:"
echo "‚Ä¢ Nunca compartas tu Client Secret"
echo "‚Ä¢ Configura URIs de redirecci√≥n espec√≠ficos"
echo "‚Ä¢ Usa HTTPS en producci√≥n"
echo "‚Ä¢ Monitorea el uso de la API"
echo ""

print_success "üéâ Configuraci√≥n de Google OAuth completada exitosamente!" 