'use client'

import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card'
import { Badge } from '@/components/ui/Badge'
import Button from '@/components/ui/Button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs'
import { 
  Upload,
  Download,
  FileText,
  Package,
  ShoppingCart,
  Activity,
  CheckCircle,
  XCircle,
  Clock,
  AlertTriangle,
  Loader2,
  RefreshCw,
  Settings,
  BarChart3,
  History,
  Zap,
  Brain,
  Target,
  Info,
  ChevronRight,
  ChevronDown,
  Database,
  Terminal,
  Eye,
  EyeOff,
  Copy,
  Trash2,
  Play,
  Pause,
  Filter,
  Search,
  Calendar,
  TrendingUp,
  TrendingDown,
  Shield,
  Sparkles
} from 'lucide-react'
import { useImportacionUnified } from '@/hooks/useImportacionUnified'
import SmartImportModal from '@/components/importacion/SmartImportModal'
import ImportacionStats from '@/components/importacion/ImportacionStats'
import { TipoImportacion } from '@/context/ImportacionGlobalContext'
import { format } from 'date-fns'
import { es } from 'date-fns/locale'

interface ImportacionLog {
  id: string
  timestamp: Date
  level: 'info' | 'warning' | 'error' | 'success'
  message: string
  details?: any
  trabajoId?: string
  userId?: string
}

interface SmartTemplate {
  id: string
  name: string
  description: string
  tipo: TipoImportacion
  fields: string[]
  sampleData: any[]
  lastUsed?: Date
  successRate: number
  autoGenerated: boolean
}

export default function ImportacionPage() {
  const [activeTab, setActiveTab] = useState('overview')
  const [showSmartModal, setShowSmartModal] = useState(false)
  const [showAdvancedMode, setShowAdvancedMode] = useState(false)
  const [logs, setLogs] = useState<ImportacionLog[]>([])
  const [smartTemplates, setSmartTemplates] = useState<SmartTemplate[]>([])
  const [selectedTemplate, setSelectedTemplate] = useState<SmartTemplate | null>(null)
  const [logFilters, setLogFilters] = useState({
    level: 'all',
    search: '',
    dateRange: 'today'
  })

  const {
    isImporting,
    currentTrabajo,
    error,
    success,
    validationErrors,
    isConnected,
    trabajos,
    estadisticas,
    importarNormal,
    descargarPlantilla,
    cancelarTrabajo,
    clearError,
    clearSuccess,
    clearValidationErrors,
    subscribeToTrabajo
  } = useImportacionUnified()

  // Generar logs de ejemplo
  useEffect(() => {
    const generateSampleLogs = () => {
      const sampleLogs: ImportacionLog[] = [
        {
          id: '1',
          timestamp: new Date(),
          level: 'info',
          message: 'Sistema de importación inteligente inicializado',
          details: { version: '2.1.0', features: ['Auto-detection', 'Smart Templates', 'WebSocket Optimization'] }
        },
        {
          id: '2',
          timestamp: new Date(Date.now() - 300000),
          level: 'success',
          message: 'Importación de productos completada (modo HTTP)',
          details: { registros: 150, exitosos: 148, errores: 2, modo: 'http' },
          trabajoId: 'trabajo-001'
        },
        {
          id: '3',
          timestamp: new Date(Date.now() - 600000),
          level: 'info',
          message: 'Detección automática: archivo pequeño, usando HTTP',
          details: { tipoDetectado: 'productos', confianza: 0.95, modo: 'http' }
        },
        {
          id: '4',
          timestamp: new Date(Date.now() - 900000),
          level: 'info',
          message: 'Importación grande iniciada con WebSocket',
          details: { registros: 5000, modo: 'websocket', seguimiento: true }
        }
      ]
      setLogs(sampleLogs)
    }

    generateSampleLogs()
  }, [])

  // Generar plantillas inteligentes de ejemplo
  useEffect(() => {
    const generateSmartTemplates = () => {
      const templates: SmartTemplate[] = [
        {
          id: '1',
          name: 'Productos Electrónicos',
          description: 'Plantilla optimizada para productos electrónicos',
          tipo: 'productos',
          fields: ['nombre', 'categoria', 'precio', 'stock', 'proveedor'],
          sampleData: [
            { nombre: 'Laptop HP', categoria: 'Electrónicos', precio: 1200, stock: 10, proveedor: 'HP Inc.' }
          ],
          lastUsed: new Date(Date.now() - 86400000),
          successRate: 95,
          autoGenerated: true
        },
        {
          id: '2',
          name: 'Proveedores Nacionales',
          description: 'Plantilla para proveedores con datos nacionales',
          tipo: 'proveedores',
          fields: ['nombre', 'email', 'telefono', 'direccion', 'rfc'],
          sampleData: [
            { nombre: 'Distribuidora ABC', email: 'contacto@abc.com', telefono: '555-1234', direccion: 'CDMX', rfc: 'ABC123456789' }
          ],
          lastUsed: new Date(Date.now() - 172800000),
          successRate: 88,
          autoGenerated: false
        },
        {
          id: '3',
          name: 'Movimientos Mensuales',
          description: 'Plantilla para movimientos de inventario mensuales',
          tipo: 'movimientos',
          fields: ['producto', 'tipo', 'cantidad', 'fecha', 'motivo'],
          sampleData: [
            { producto: 'Laptop HP', tipo: 'entrada', cantidad: 5, fecha: '2024-01-15', motivo: 'Compra' }
          ],
          lastUsed: new Date(Date.now() - 259200000),
          successRate: 92,
          autoGenerated: true
        }
      ]
      setSmartTemplates(templates)
    }

    generateSmartTemplates()
  }, [])

  const getLogLevelColor = (level: string) => {
    switch (level) {
      case 'success': return 'bg-green-100 text-green-800'
      case 'error': return 'bg-red-100 text-red-800'
      case 'warning': return 'bg-yellow-100 text-yellow-800'
      case 'info': return 'bg-blue-100 text-blue-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getLogLevelIcon = (level: string) => {
    switch (level) {
      case 'success': return <CheckCircle className="w-4 h-4" />
      case 'error': return <XCircle className="w-4 h-4" />
      case 'warning': return <AlertTriangle className="w-4 h-4" />
      case 'info': return <Info className="w-4 h-4" />
      default: return <Info className="w-4 h-4" />
    }
  }

  const filteredLogs = logs.filter(log => {
    if (logFilters.level !== 'all' && log.level !== logFilters.level) return false
    if (logFilters.search && !log.message.toLowerCase().includes(logFilters.search.toLowerCase())) return false
    return true
  })

  const handleTemplateSelect = (template: SmartTemplate) => {
    setSelectedTemplate(template)
    setShowSmartModal(true)
  }

  const handleAdvancedModeToggle = () => {
    setShowAdvancedMode(!showAdvancedMode)
  }

  const handleImportSuccess = (result: any) => {
    // Aquí puedes agregar lógica adicional después de una importación exitosa
    console.log('Importación exitosa:', result)
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Importación Inteligente</h1>
          <p className="text-gray-600 mt-1">
            Sistema que detecta automáticamente el mejor método de importación
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button
            onClick={handleAdvancedModeToggle}
            variant={showAdvancedMode ? "default" : "outline"}
            size="sm"
            className="flex items-center gap-2"
          >
            <Zap className="w-4 h-4" />
            {showAdvancedMode ? 'Modo Avanzado' : 'Modo Simple'}
          </Button>
        </div>
      </div>

      {/* Tabs principales */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <BarChart3 className="w-4 h-4" />
            Resumen
          </TabsTrigger>
          <TabsTrigger value="import" className="flex items-center gap-2">
            <Upload className="w-4 h-4" />
            Importar
          </TabsTrigger>
          <TabsTrigger value="templates" className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Plantillas
          </TabsTrigger>
          <TabsTrigger value="logs" className="flex items-center gap-2">
            <Terminal className="w-4 h-4" />
            Logs
          </TabsTrigger>
        </TabsList>

        {/* Tab: Resumen */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Total Importaciones</p>
                    <p className="text-2xl font-bold text-gray-900">{trabajos.length}</p>
                  </div>
                  <Database className="w-8 h-8 text-blue-500" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Exitosas</p>
                    <p className="text-2xl font-bold text-green-600">
                      {trabajos.filter(t => t.estado === 'completado').length}
                    </p>
                  </div>
                  <CheckCircle className="w-8 h-8 text-green-500" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">En Progreso</p>
                    <p className="text-2xl font-bold text-blue-600">
                      {trabajos.filter(t => t.estado === 'procesando').length}
                    </p>
                  </div>
                  <Loader2 className="w-8 h-8 text-blue-500 animate-spin" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">Con Errores</p>
                    <p className="text-2xl font-bold text-red-600">
                      {trabajos.filter(t => t.estado === 'error').length}
                    </p>
                  </div>
                  <XCircle className="w-8 h-8 text-red-500" />
                </div>
              </CardContent>
            </Card>
          </div>

          <ImportacionStats 
            trabajos={trabajos}
            isLoading={false}
            isConnected={isConnected}
          />
        </TabsContent>

        {/* Tab: Importar */}
        <TabsContent value="import" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Importación Inteligente */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="w-5 h-5" />
                  Importación Inteligente
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <p className="text-gray-600">
                  El sistema analiza automáticamente tu archivo y elige el mejor método de importación.
                </p>
                <div className="space-y-2 text-sm text-gray-600">
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>Detección automática de tamaño y complejidad</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>HTTP para archivos pequeños (rápido)</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span>WebSocket para archivos grandes (seguimiento)</span>
                  </div>
                </div>
                <Button
                  onClick={() => setShowSmartModal(true)}
                  className="w-full"
                  size="lg"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  Iniciar Importación Inteligente
                </Button>
              </CardContent>
            </Card>

            {/* Estadísticas de Optimización */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="w-5 h-5" />
                  Optimización del Sistema
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Conexiones WebSocket:</span>
                    <Badge variant={isConnected ? "default" : "secondary"}>
                      {isConnected ? 'Activa' : 'Inactiva'}
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Importaciones HTTP:</span>
                    <span className="font-medium">
                      {trabajos.filter(t => t.modo === 'http').length}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Importaciones WebSocket:</span>
                    <span className="font-medium">
                      {trabajos.filter(t => t.modo === 'websocket').length}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Tiempo promedio HTTP:</span>
                    <span className="font-medium">~5s</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Trabajos Recientes */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <History className="w-5 h-5" />
                Trabajos Recientes
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {trabajos.slice(0, 5).map((trabajo) => (
                  <div key={trabajo.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-2">
                        {trabajo.tipo === 'productos' && <Package className="w-4 h-4 text-blue-500" />}
                        {trabajo.tipo === 'proveedores' && <ShoppingCart className="w-4 h-4 text-orange-500" />}
                        {trabajo.tipo === 'movimientos' && <Activity className="w-4 h-4 text-purple-500" />}
                        <span className="font-medium capitalize">{trabajo.tipo}</span>
                      </div>
                      <Badge variant={trabajo.estado === 'completado' ? 'default' : 'secondary'}>
                        {trabajo.estado}
                      </Badge>
                      {trabajo.modo && (
                        <Badge variant="outline" className="text-xs">
                          {trabajo.modo}
                        </Badge>
                      )}
                    </div>
                    <div className="text-sm text-gray-500">
                      {format(new Date(trabajo.fechaCreacion), 'dd/MM/yyyy HH:mm')}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Tab: Plantillas */}
        <TabsContent value="templates" className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold">Plantillas Inteligentes</h3>
              <p className="text-gray-600">Plantillas optimizadas basadas en tus datos históricos</p>
            </div>
            <Button variant="outline" size="sm">
              <Download className="w-4 h-4 mr-2" />
              Descargar Todas
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {smartTemplates.map((template) => (
              <Card key={template.id} className="hover:shadow-lg transition-shadow cursor-pointer">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-base">{template.name}</CardTitle>
                    <Badge variant={template.autoGenerated ? 'default' : 'secondary'}>
                      {template.autoGenerated ? 'Auto' : 'Manual'}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-gray-600">{template.description}</p>
                  
                  <div className="flex items-center gap-2 text-sm">
                    <Target className="w-4 h-4 text-blue-500" />
                    <span className="capitalize">{template.tipo}</span>
                  </div>

                  <div className="flex items-center gap-2 text-sm">
                    <TrendingUp className="w-4 h-4 text-green-500" />
                    <span>{template.successRate}% éxito</span>
                  </div>

                  <div className="flex items-center gap-2 text-sm">
                    <Calendar className="w-4 h-4 text-gray-500" />
                    <span>
                      {template.lastUsed 
                        ? format(template.lastUsed, 'dd/MM/yyyy')
                        : 'Nunca usado'
                      }
                    </span>
                  </div>

                  <Button
                    onClick={() => handleTemplateSelect(template)}
                    className="w-full"
                    size="sm"
                  >
                    <Play className="w-4 h-4 mr-2" />
                    Usar Plantilla
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Tab: Logs */}
        <TabsContent value="logs" className="space-y-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold">Logs del Sistema</h3>
              <p className="text-gray-600">Registro detallado de todas las operaciones de importación</p>
            </div>
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2">
                <Search className="w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Buscar en logs..."
                  className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                  value={logFilters.search}
                  onChange={(e) => setLogFilters(prev => ({ ...prev, search: e.target.value }))}
                />
              </div>
              <select
                className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                value={logFilters.level}
                onChange={(e) => setLogFilters(prev => ({ ...prev, level: e.target.value }))}
              >
                <option value="all">Todos los niveles</option>
                <option value="info">Info</option>
                <option value="warning">Warning</option>
                <option value="error">Error</option>
                <option value="success">Success</option>
              </select>
              <Button variant="outline" size="sm">
                <RefreshCw className="w-4 h-4 mr-2" />
                Actualizar
              </Button>
            </div>
          </div>

          <Card>
            <CardContent className="p-0">
              <div className="max-h-96 overflow-y-auto">
                {filteredLogs.map((log) => (
                  <div key={log.id} className="p-4 border-b border-gray-100 hover:bg-gray-50">
                    <div className="flex items-start gap-3">
                      <div className={`p-1 rounded ${getLogLevelColor(log.level)}`}>
                        {getLogLevelIcon(log.level)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium text-gray-900">{log.message}</p>
                          <span className="text-xs text-gray-500">
                            {format(log.timestamp, 'HH:mm:ss')}
                          </span>
                        </div>
                        {log.details && (
                          <div className="mt-2 text-xs text-gray-600 bg-gray-50 p-2 rounded">
                            <pre className="whitespace-pre-wrap">{JSON.stringify(log.details, null, 2)}</pre>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Modal de Importación Inteligente */}
      <SmartImportModal
        isOpen={showSmartModal}
        onClose={() => setShowSmartModal(false)}
        onSuccess={handleImportSuccess}
      />
    </div>
  )
} 