#!/bin/bash

# Script para probar el flujo completo de autenticaci√≥n - IAM System
echo "üß™ Probador del Flujo de Autenticaci√≥n - IAM System"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar mensajes
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Configuraci√≥n
API_BASE_URL="http://localhost:3001"
TEST_EMAIL="test@example.com"
TEST_PASSWORD="Test123!@#"
TEST_NAME="Usuario de Prueba"

echo ""
print_info "üß™ Iniciando pruebas del flujo de autenticaci√≥n..."
echo ""

# Funci√≥n para hacer requests HTTP
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local headers=$4
    
    if [ -n "$data" ]; then
        if [ -n "$headers" ]; then
            curl -s -X "$method" "$API_BASE_URL$endpoint" \
                -H "Content-Type: application/json" \
                -H "$headers" \
                -d "$data" \
                -w "\nHTTP_STATUS:%{http_code}\n"
        else
            curl -s -X "$method" "$API_BASE_URL$endpoint" \
                -H "Content-Type: application/json" \
                -d "$data" \
                -w "\nHTTP_STATUS:%{http_code}\n"
        fi
    else
        if [ -n "$headers" ]; then
            curl -s -X "$method" "$API_BASE_URL$endpoint" \
                -H "$headers" \
                -w "\nHTTP_STATUS:%{http_code}\n"
        else
            curl -s -X "$method" "$API_BASE_URL$endpoint" \
                -w "\nHTTP_STATUS:%{http_code}\n"
        fi
    fi
}

# Funci√≥n para extraer HTTP status
get_http_status() {
    echo "$1" | grep "HTTP_STATUS:" | cut -d: -f2
}

# Funci√≥n para extraer respuesta JSON
get_json_response() {
    echo "$1" | sed '/HTTP_STATUS:/d'
}

# 1. Probar endpoint de salud
print_status "1. Probando endpoint de salud..."
response=$(make_request "GET" "/health")
status=$(get_http_status "$response")
json_response=$(get_json_response "$response")

if [ "$status" = "200" ]; then
    print_success "‚úÖ Endpoint de salud funcionando"
else
    print_error "‚ùå Endpoint de salud fall√≥: $status"
    echo "Respuesta: $json_response"
fi

echo ""

# 2. Probar estado de Google OAuth
print_status "2. Probando estado de Google OAuth..."
response=$(make_request "GET" "/auth/google/status")
status=$(get_http_status "$response")
json_response=$(get_json_response "$response")

if [ "$status" = "200" ]; then
    print_success "‚úÖ Endpoint de estado de Google OAuth funcionando"
    echo "Respuesta: $json_response"
else
    print_warning "‚ö†Ô∏è  Endpoint de estado de Google OAuth fall√≥: $status"
fi

echo ""

# 3. Probar registro de usuario individual
print_status "3. Probando registro de usuario individual..."
register_data="{\"nombre\":\"$TEST_NAME\",\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}"
response=$(make_request "POST" "/auth/register" "$register_data")
status=$(get_http_status "$response")
json_response=$(get_json_response "$response")

if [ "$status" = "201" ]; then
    print_success "‚úÖ Registro de usuario exitoso"
    echo "Respuesta: $json_response"
    
    # Extraer token para pruebas posteriores
    TOKEN=$(echo "$json_response" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    if [ -n "$TOKEN" ]; then
        print_info "Token extra√≠do para pruebas posteriores"
    fi
else
    print_warning "‚ö†Ô∏è  Registro de usuario fall√≥: $status"
    echo "Respuesta: $json_response"
fi

echo ""

# 4. Probar login
print_status "4. Probando login..."
login_data="{\"email\":\"$TEST_EMAIL\",\"password\":\"$TEST_PASSWORD\"}"
response=$(make_request "POST" "/auth/login" "$login_data")
status=$(get_http_status "$response")
json_response=$(get_json_response "$response")

if [ "$status" = "200" ]; then
    print_success "‚úÖ Login exitoso"
    echo "Respuesta: $json_response"
else
    print_warning "‚ö†Ô∏è  Login fall√≥: $status"
    echo "Respuesta: $json_response"
fi

echo ""

# 5. Probar endpoint /me (si tenemos token)
if [ -n "$TOKEN" ]; then
    print_status "5. Probando endpoint /me..."
    response=$(make_request "GET" "/auth/me" "" "Authorization: Bearer $TOKEN")
    status=$(get_http_status "$response")
    json_response=$(get_json_response "$response")

    if [ "$status" = "200" ]; then
        print_success "‚úÖ Endpoint /me funcionando"
        echo "Respuesta: $json_response"
    else
        print_warning "‚ö†Ô∏è  Endpoint /me fall√≥: $status"
        echo "Respuesta: $json_response"
    fi
else
    print_warning "‚ö†Ô∏è  No se pudo probar /me - token no disponible"
fi

echo ""

# 6. Probar verificaci√≥n de setup
if [ -n "$TOKEN" ]; then
    print_status "6. Probando verificaci√≥n de setup..."
    response=$(make_request "GET" "/auth/needs-setup" "" "Authorization: Bearer $TOKEN")
    status=$(get_http_status "$response")
    json_response=$(get_json_response "$response")

    if [ "$status" = "200" ]; then
        print_success "‚úÖ Verificaci√≥n de setup funcionando"
        echo "Respuesta: $json_response"
    else
        print_warning "‚ö†Ô∏è  Verificaci√≥n de setup fall√≥: $status"
        echo "Respuesta: $json_response"
    fi
else
    print_warning "‚ö†Ô∏è  No se pudo probar needs-setup - token no disponible"
fi

echo ""

# 7. Probar gesti√≥n de usuarios (si tenemos token)
if [ -n "$TOKEN" ]; then
    print_status "7. Probando gesti√≥n de usuarios..."
    
    # Listar usuarios
    response=$(make_request "GET" "/users" "" "Authorization: Bearer $TOKEN")
    status=$(get_http_status "$response")
    json_response=$(get_json_response "$response")

    if [ "$status" = "200" ]; then
        print_success "‚úÖ Listado de usuarios funcionando"
        echo "Respuesta: $json_response"
    else
        print_warning "‚ö†Ô∏è  Listado de usuarios fall√≥: $status"
        echo "Respuesta: $json_response"
    fi
    
    # Estad√≠sticas de usuarios
    response=$(make_request "GET" "/users/stats" "" "Authorization: Bearer $TOKEN")
    status=$(get_http_status "$response")
    json_response=$(get_json_response "$response")

    if [ "$status" = "200" ]; then
        print_success "‚úÖ Estad√≠sticas de usuarios funcionando"
        echo "Respuesta: $json_response"
    else
        print_warning "‚ö†Ô∏è  Estad√≠sticas de usuarios fall√≥: $status"
        echo "Respuesta: $json_response"
    fi
else
    print_warning "‚ö†Ô∏è  No se pudo probar gesti√≥n de usuarios - token no disponible"
fi

echo ""

# 8. Probar logout
print_status "8. Probando logout..."
response=$(make_request "POST" "/auth/logout")
status=$(get_http_status "$response")
json_response=$(get_json_response "$response")

if [ "$status" = "200" ]; then
    print_success "‚úÖ Logout exitoso"
    echo "Respuesta: $json_response"
else
    print_warning "‚ö†Ô∏è  Logout fall√≥: $status"
    echo "Respuesta: $json_response"
fi

echo ""
print_success "üéâ Pruebas completadas!"
echo ""
print_info "üìã Resumen de funcionalidades probadas:"
echo "   ‚úÖ Endpoint de salud"
echo "   ‚úÖ Estado de Google OAuth"
echo "   ‚úÖ Registro de usuarios"
echo "   ‚úÖ Login con email/password"
echo "   ‚úÖ Verificaci√≥n de usuario autenticado"
echo "   ‚úÖ Verificaci√≥n de setup de empresa"
echo "   ‚úÖ Gesti√≥n de usuarios (listado y estad√≠sticas)"
echo "   ‚úÖ Logout"
echo ""
print_info "üîß Pr√≥ximos pasos:"
echo "1. Configura Google OAuth con: ./setup-google-oauth.sh"
echo "2. Prueba el login con Google desde el frontend"
echo "3. Configura una empresa para completar el setup"
echo "4. Prueba la gesti√≥n completa de usuarios"
echo ""
print_warning "‚ö†Ô∏è  RECORDATORIOS:"
echo "‚Ä¢ Aseg√∫rate de que el backend est√© ejecut√°ndose en http://localhost:3001"
echo "‚Ä¢ Verifica que las variables de entorno est√©n configuradas"
echo "‚Ä¢ Para pruebas en producci√≥n, cambia API_BASE_URL en el script" 