/*
 * ESP32 IAM - Sistema de Lecturas Periodicas
 * Codigo generado automaticamente para: ESP32Temp
 * Device ID: esp32_1755732408873_vlu3k1ucf
 * Fecha de generacion: 20250820T232717
 * 
 * üîß CORREGIDO: Ahora env√≠a lecturas al endpoint correcto /iot/lecturas
 * 
 * üîß NUEVO: Este codigo incluye headers ESP32 autom√°ticos para:
 * - x-empresa-id: ID de la empresa
 * - x-device-type: Tipo de dispositivo (esp32)
 * - x-esp32-device: Identificador ESP32
 * - x-esp32-version: Versi√≥n del firmware
 * - User-Agent: Identificador del dispositivo
 * 
 * Los headers se env√≠an autom√°ticamente en todas las peticiones HTTP
 * para autenticaci√≥n y identificaci√≥n en el backend.
 */

#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <SPIFFS.h>
#include <WiFiClientSecure.h>
#include <time.h>

#include <DHT.h>


#include <SPI.h>
#include <Wire.h>

// ===========================================
// CONFIGURACI√ìN DEL DISPOSITIVO
// ===========================================

// Informaci√≥n del dispositivo
#define DEVICE_ID "esp32_1755732408873_vlu3k1ucf"
#define DEVICE_NAME "ESP32Temp"

// Configuraci√≥n WiFi (configuraci√≥n inicial del usuario)
String wifiSSID = "IZZI-148B";
String wifiPassword = "98F781F3148B";

// üîß CORREGIDO: Configuraci√≥n API con endpoint correcto
String apiBaseUrl = "https://api.iaminventario.com.mx"; // Normalizar sin slash final
String apiToken = "AJQREILpOUDX9rxhtjbum3BxQptLOAZ0";
String apiEndpoint = "/iot/lecturas"; // ‚úÖ CORREGIDO: Endpoint correcto para IoT

// üîß CORREGIDO: Funci√≥n simplificada que SIEMPRE retorna el endpoint correcto
String buildLecturasURL() {
  return String(apiBaseUrl) + "/iot/lecturas"; // ‚úÖ SIEMPRE usar /iot/lecturas
}

// üîß NUEVO: Configuraci√≥n de puerto y verificaci√≥n
bool backendConectado = false;
WiFiClientSecure secureClient; // Cliente TLS para HTTPS

// üîß NUEVO: Funci√≥n para verificar conexi√≥n al backend
bool verificarConexionBackend() {
  HTTPClient http;
  String testUrl = String(apiBaseUrl) + "/iot/health"; // Endpoint de health check
  
  Serial.println("üîç Verificando conexi√≥n al backend: " + testUrl);
  
  http.begin(testUrl);
  http.addHeader("Content-Type", "application/json");
  http.addHeader("x-empresa-id", String(1));
  http.addHeader("x-device-type", "esp32");
  http.addHeader("x-esp32-device", "true");
  
  http.setTimeout(5000); // 5 segundos para health check
  
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    Serial.println("‚úÖ Backend conectado correctamente");
    backendConectado = true;
    http.end();
    return true;
  } else {
    Serial.println("‚ùå Error conectando al backend. HTTP Code: " + String(httpCode));
    Serial.println("üîç Verificar:");
    Serial.println("   ‚Ä¢ URL del servidor: " + apiBaseUrl);
    Serial.println("   ‚Ä¢ Servicio backend ejecut√°ndose");
    Serial.println("   ‚Ä¢ Firewall/red");
    
    // üîß NUEVO: Intentar actualizar la URL del servidor autom√°ticamente
    Serial.println("üîÑ Intentando actualizar URL del servidor autom√°ticamente...");
    if (actualizarURLServidor()) {
      Serial.println("‚úÖ URL actualizada, verificando conexi√≥n nuevamente...");
      http.end();
      return verificarConexionBackend(); // Reintentar con la nueva URL
    }
    
    backendConectado = false;
    http.end();
    return false;
  }
}

/**
 * üîß NUEVO: Actualiza la URL del servidor autom√°ticamente
 * Esta funci√≥n se llama cuando se detecta un cambio de URL
 */
bool actualizarURLServidor() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi no conectado para actualizar URL del servidor");
    return false;
  }

  HTTPClient http;
  String url = String(apiBaseUrl) + "/iot/server-info";
  
  Serial.println("üîç Verificando URL del servidor: " + url);
  
  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  http.addHeader("x-empresa-id", String(1));
  http.addHeader("x-device-type", "esp32");
  http.addHeader("x-esp32-device", "true");
  
  http.setTimeout(5000);
  
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);
    
    if (doc.containsKey("baseUrl")) {
      String nuevaURL = doc["baseUrl"].as<String>();
      if (nuevaURL != "") {
        Serial.println("üîÑ URL del servidor actualizada: " + nuevaURL);
        apiBaseUrl = nuevaURL;
        http.end();
        return true;
      }
    } else if (doc.containsKey("serverIP")) {
      String nuevaIP = doc["serverIP"].as<String>();
      if (nuevaIP != "") {
        String nuevaURL = String("https://") + nuevaIP; // preferir HTTPS
        Serial.println("üîÑ URL del servidor actualizada: " + nuevaURL);
        apiBaseUrl = nuevaURL;
        http.end();
        return true;
      }
    }
    
    http.end();
    return false;
  } else {
    Serial.println("‚ùå Error obteniendo informaci√≥n del servidor. HTTP Code: " + String(httpCode));
    http.end();
    return false;
  }
}

// Configuraci√≥n de sensores (se obtiene desde el backend)
struct SensorConfig {
  String tipo;
  String nombre;
  int pin;
  int pin2;
  bool enabled;
  float umbralMin;
  float umbralMax;
  String unidad;
  int intervalo;
};

SensorConfig sensores[10];
int numSensores = 0;
int intervaloLecturas = 10000;
bool socketEnabled = false;


// Configuraci√≥n inicial de sensores (del usuario)
void configurarSensoresIniciales() {
  numSensores = 0;
  
  sensores[numSensores].tipo = "TEMPERATURA";
  sensores[numSensores].nombre = "Temperatura (DHT22)";
  sensores[numSensores].pin = 4;
  sensores[numSensores].pin2 = 0;
  sensores[numSensores].enabled = true;
  sensores[numSensores].umbralMin = 20;
  sensores[numSensores].umbralMax = 27;
  sensores[numSensores].unidad = "¬∞C";
  sensores[numSensores].intervalo = 12000;
  numSensores++;
  
  Serial.println("üìä Sensores iniciales configurados: " + String(numSensores));
}

// Variables de estado
bool configuracionCargada = false;
unsigned long ultimaLectura = 0;
unsigned long ultimoIntentoConfig = 0;
int intentosConfig = 0;
const int MAX_INTENTOS_CONFIG = 5;

// ===========================================
// INICIALIZACI√ìN DE SENSORES
// ===========================================

// Sensor DHT22
DHT dht(4, DHT22);





// ===========================================
// FUNCIONES DE CONFIGURACI√ìN
// ===========================================

/**
 * Obtiene la configuraci√≥n desde el backend
 */
bool obtenerConfiguracionDesdeBackend() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi no conectado para obtener configuraci√≥n");
    return false;
  }

  HTTPClient http;
  String url = String(apiBaseUrl) + "/iot/config";
  
  Serial.println("üîß Obteniendo configuraci√≥n desde: " + url);
  
  // Crear JSON con los datos de autenticaci√≥n del dispositivo
  DynamicJsonDocument authDoc(512);
  authDoc["deviceId"] = DEVICE_ID;
  authDoc["apiToken"] = apiToken;
  authDoc["empresaId"] = 1;
  
  String authJson;
  serializeJson(authDoc, authJson);
  
  http.begin(url);
  http.addHeader("Content-Type", "application/json");
  
  int httpCode = http.POST(authJson);
  
  if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_CREATED) {
    String payload = http.getString();
    Serial.println("‚úÖ Configuraci√≥n recibida: " + payload);
    
    DynamicJsonDocument doc(2048);
    DeserializationError error = deserializeJson(doc, payload);
    
    if (!error) {
      // Extraer configuraci√≥n WiFi
      wifiSSID = doc["wifi"]["ssid"].as<String>();
      wifiPassword = doc["wifi"]["password"].as<String>();
      
      // Extraer configuraci√≥n API
      apiBaseUrl = doc["api"]["baseUrl"].as<String>();
      apiToken = doc["api"]["token"].as<String>();
      apiEndpoint = doc["api"]["endpoint"].as<String>();
      
      // Extraer configuraci√≥n de sensores
      JsonArray sensoresArray = doc["sensores"];
      numSensores = 0;
      
      for (JsonObject sensor : sensoresArray) {
        if (sensor["enabled"] && numSensores < 10) {
          sensores[numSensores].tipo = sensor["tipo"].as<String>();
          sensores[numSensores].nombre = sensor["nombre"].as<String>();
          sensores[numSensores].pin = sensor["pin"];
          sensores[numSensores].pin2 = sensor["pin2"];
          sensores[numSensores].enabled = sensor["enabled"];
          sensores[numSensores].umbralMin = sensor["umbralMin"];
          sensores[numSensores].umbralMax = sensor["umbralMax"];
          sensores[numSensores].unidad = sensor["unidad"].as<String>();
          sensores[numSensores].intervalo = sensor["intervalo"];
          numSensores++;
        }
      }
      
      intervaloLecturas = doc["intervalo"] | 10000;
      
      Serial.println("‚úÖ Configuraci√≥n cargada exitosamente");
      Serial.println("üì° WiFi SSID: " + wifiSSID);
      Serial.println("üîë API Base URL: " + apiBaseUrl);
      Serial.println("üìä Sensores configurados: " + String(numSensores));
      Serial.println("‚è±Ô∏è Intervalo: " + String(intervaloLecturas) + "ms");
      
      configuracionCargada = true;
      http.end();
      return true;
    } else {
      Serial.println("‚ùå Error parseando JSON de configuraci√≥n");
    }
  } else {
    Serial.println("‚ùå Error obteniendo configuraci√≥n. HTTP Code: " + String(httpCode));
  }
  
  http.end();
  return false;
}

/**
 * Conecta al WiFi usando la configuraci√≥n del backend
 */
bool conectarWiFi() {
  if (wifiSSID.length() == 0) {
    Serial.println("‚ùå SSID no configurado");
    return false;
  }
  
  Serial.println("üì° Conectando a WiFi: " + wifiSSID);
  WiFi.begin(wifiSSID.c_str(), wifiPassword.c_str());
  
  int intentos = 0;
  while (WiFi.status() != WL_CONNECTED && intentos < 20) {
    delay(500);
    Serial.print(".");
    intentos++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi conectado");
    Serial.println("üì∂ IP: " + WiFi.localIP().toString());
    return true;
  } else {
    Serial.println("\n‚ùå Error conectando WiFi");
    return false;
  }
}

// ===========================================
// FUNCIONES DE LECTURA DE SENSORES
// ===========================================

/**
 * Lee un sensor espec√≠fico
 */
float leerSensor(int index) {
  if (index >= numSensores || !sensores[index].enabled) {
    return 0.0;
  }
  
  String tipo = sensores[index].tipo;
  int pin = sensores[index].pin;
  
  if (tipo == "TEMPERATURA") {
    return dht.readTemperature();
  } else if (tipo == "HUMEDAD") {
    return dht.readHumidity();
  }  
  
  return 0.0;
}

/**
 * üîß CORREGIDO: Env√≠a las lecturas al endpoint correcto /iot/lecturas
 */
bool enviarLecturas() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi no conectado para enviar lecturas");
    return false;
  }
  
  HTTPClient http;
  // üîß CORREGIDO: Usar directamente el endpoint correcto
  String url = String(apiBaseUrl) + "/iot/lecturas";
  
  Serial.println("üì§ Enviando lecturas a: " + url);
  
  // Crear JSON con las lecturas
  DynamicJsonDocument doc(2048);
  doc["deviceId"] = DEVICE_ID;
  doc["deviceName"] = DEVICE_NAME;
  doc["ubicacionId"] = 1;
  doc["empresaId"] = 1;
  doc["apiToken"] = apiToken;
  doc["timestamp"] = (long long)time(nullptr) * 1000LL; // epoch ms v√≠a NTP
  JsonObject sensorsObj = doc.createNestedObject("sensors");
  // Agregar un valor por defecto (se sobreescribe en enviarLecturasMultiples)
  sensorsObj["Temperatura (DHT22)"] = 0.0;
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  Serial.println("üì§ Enviando lecturas: " + jsonString);
  
  if (url.startsWith("https://")) {
    secureClient.setInsecure();
    http.begin(secureClient, url);
  } else {
    http.begin(url);
  }
  http.addHeader("Content-Type", "application/json");
  
  // üîß HEADERS ESP32 REQUERIDOS PARA EL BACKEND
  http.addHeader("x-empresa-id", String(1));
  http.addHeader("x-device-type", "esp32");
  http.addHeader("x-esp32-device", "true");
  http.addHeader("x-esp32-version", "1.0.0");
  http.addHeader("User-Agent", "ESP32-Sensor/1.0");
  
  int httpCode = http.POST(jsonString);
  
  if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_CREATED) {
    String response = http.getString();
    Serial.println("‚úÖ Lecturas enviadas exitosamente");
    Serial.println("üì• Respuesta: " + response);
    http.end();
    return true;
  } else {
    Serial.println("‚ùå Error enviando lecturas. HTTP Code: " + String(httpCode));
    String response = http.getString();
    Serial.println("üì• Respuesta: " + response);
    http.end();
    return false;
  }
}

/**
 * üîß CORREGIDO: Env√≠a lecturas de m√∫ltiples sensores al endpoint correcto /iot/lecturas
 */
bool enviarLecturasMultiples() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi no conectado para enviar lecturas m√∫ltiples");
    return false;
  }
  
  HTTPClient http;
  // üîß CORREGIDO: Usar directamente el endpoint correcto
  String url = String(apiBaseUrl) + "/iot/lecturas";
  
  Serial.println("üåê URL del backend: " + url);
  Serial.println("üîë Empresa ID: " + String(1));
  
  // Construir un payload √∫nico con m√∫ltiples lecturas
  DynamicJsonDocument doc(4096);
  doc["deviceId"] = DEVICE_ID;
  doc["deviceName"] = DEVICE_NAME;
  doc["ubicacionId"] = 1;
  doc["empresaId"] = 1;
  doc["apiToken"] = apiToken;
  doc["timestamp"] = (long long)time(nullptr) * 1000LL; // epoch ms v√≠a NTP

  JsonObject sensorsObj = doc.createNestedObject("sensors");
  JsonArray detailsArr = doc.createNestedArray("sensorDetails");

  int enviados = 0;
  for (int i = 0; i < numSensores; i++) {
    if (sensores[i].enabled) {
      float valor = leerSensor(i);
      String nombre = sensores[i].nombre;
      if (isnan(valor)) valor = 0.0;
      sensorsObj[nombre] = valor;

      JsonObject det = detailsArr.createNestedObject();
      det["tipo"] = sensores[i].tipo;
      det["valor"] = valor;
      det["unidad"] = sensores[i].unidad;
      det["ubicacionId"] = 1;
      enviados++;
    }
  }

  String jsonString;
  serializeJson(doc, jsonString);
  Serial.println("üì§ Enviando lecturas m√∫ltiples: " + jsonString);

  // Iniciar conexi√≥n (HTTP/HTTPS)
  if (url.startsWith("https://")) {
    secureClient.setInsecure(); // Permitir TLS sin cert en ESP32
    http.begin(secureClient, url);
  } else {
    http.begin(url);
  }

  http.addHeader("Content-Type", "application/json");
  // Headers de identificaci√≥n
  http.addHeader("x-empresa-id", String(1));
  http.addHeader("x-device-type", "esp32");
  http.addHeader("x-esp32-device", "true");
  http.addHeader("x-esp32-version", "1.0.0");
  http.addHeader("User-Agent", "ESP32-Sensor/1.0");
  http.setTimeout(15000);

  int httpCode = http.POST(jsonString);
  if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_CREATED) {
    String response = http.getString();
    Serial.println("‚úÖ Lecturas m√∫ltiples enviadas: " + String(enviados));
    Serial.println("üì• Respuesta: " + response);
    http.end();
    return true;
  } else {
    Serial.println("‚ùå Error enviando lecturas m√∫ltiples. HTTP Code: " + String(httpCode));
    String response = http.getString();
    Serial.println("üì• Respuesta: " + response);
    if (httpCode == -1) {
      Serial.println("üîç Error -1: Problema de conexi√≥n/SSL. Verifica WiFi, certificado o URL: " + url);
    }
    http.end();
    return false;
  }
}

/**
 * üîß NUEVO: Registra sensores en el backend desde el ESP32
 */
bool registrarSensoresEnBackend() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi no conectado para registrar sensores");
    return false;
  }
  
  HTTPClient http;
  String url = String(apiBaseUrl) + "/sensores/iot/registrar-sensor";
  
  Serial.println("üîß Registrando sensores en el backend...");
  Serial.println("üåê URL: " + url);
  Serial.println("üîë Empresa ID: " + String(1));
  
  // Registrar cada sensor habilitado
  for (int i = 0; i < numSensores; i++) {
    if (sensores[i].enabled) {
      // Crear documento para registro del sensor
      DynamicJsonDocument sensorDoc(1024);
      sensorDoc["nombre"] = sensores[i].nombre;
      sensorDoc["tipo"] = sensores[i].tipo;
      sensorDoc["ubicacionId"] = 1;
      sensorDoc["descripcion"] = "Sensor " + sensores[i].nombre + " registrado desde ESP32";
      // üîß CORREGIR: Asegurar que el sensor se cree como activo
      sensorDoc["activo"] = true;
      sensorDoc["modo"] = "AUTOMATICO";
      
      // Configuraci√≥n del sensor
      JsonObject configuracion = sensorDoc.createNestedObject("configuracion");
      configuracion["unidad"] = sensores[i].unidad;
      configuracion["rango_min"] = sensores[i].umbralMin;
      configuracion["rango_max"] = sensores[i].umbralMax;
      configuracion["precision"] = 0.1;
      configuracion["intervalo_lectura"] = sensores[i].intervalo;
      configuracion["umbral_alerta"] = sensores[i].umbralMax * 0.8;
      configuracion["umbral_critico"] = sensores[i].umbralMax * 0.9;
      
      String sensorJsonString;
      serializeJson(sensorDoc, sensorJsonString);
      
      Serial.println("üì§ Registrando sensor " + sensores[i].nombre + ": " + sensorJsonString);
      
      http.begin(url);
      http.addHeader("Content-Type", "application/json");
      
      // üîß HEADERS ESP32 REQUERIDOS PARA EL BACKEND
      http.addHeader("x-empresa-id", String(1));
      http.addHeader("x-device-type", "esp32");
      http.addHeader("x-esp32-device", "true");
      http.addHeader("x-esp32-version", "1.0.0");
      http.addHeader("User-Agent", "ESP32-Sensor/1.0");
      
      // üîß CONFIGURACI√ìN DE TIMEOUT
      http.setTimeout(15000); // 15 segundos de timeout para registro
      
      int httpCode = http.POST(sensorJsonString);
      
      if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_CREATED) {
        String response = http.getString();
        Serial.println("‚úÖ Sensor " + sensores[i].nombre + " registrado exitosamente");
        Serial.println("üì• Respuesta: " + response);
      } else {
        Serial.println("‚ùå Error registrando sensor " + sensores[i].nombre + ". HTTP Code: " + String(httpCode));
        String response = http.getString();
        Serial.println("üì• Respuesta: " + response);
        
        // üîß DIAGN√ìSTICO DE ERRORES
        if (httpCode == -1) {
          Serial.println("üîç Error -1: Problema de conexi√≥n. Verificar:");
          Serial.println("   ‚Ä¢ URL del backend: " + url);
          Serial.println("   ‚Ä¢ Conexi√≥n WiFi");
          Serial.println("   ‚Ä¢ Headers enviados");
          Serial.println("   ‚Ä¢ Empresa ID: " + String(1));
        }
      }
      
      http.end();
      delay(1000); // Pausa entre registros para estabilidad
    }
  }
  
  Serial.println("‚úÖ Todos los sensores registrados en el backend");
  return true;
}

// ===========================================
// SETUP Y LOOP PRINCIPAL
// ===========================================

void setup() {
  Serial.begin(115200);
  Serial.println("\nüöÄ Iniciando ESP32 IAM - " + String(DEVICE_NAME));
  Serial.println("üÜî Device ID: " + String(DEVICE_ID));
  Serial.println("üîß CORREGIDO: Ahora env√≠a lecturas a /iot/lecturas");
  
  // Inicializar SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("‚ùå Error inicializando SPIFFS");
    return;
  }
  
  // Configuraci√≥n inicial de WiFi
  WiFi.mode(WIFI_STA);
  
  // Conectar WiFi con la configuraci√≥n del usuario
  Serial.println("üì° Conectando WiFi con configuraci√≥n inicial...");
  if (conectarWiFi()) {
    Serial.println("‚úÖ WiFi conectado con configuraci√≥n inicial");
    
    // Intentar obtener configuraci√≥n actualizada desde el backend (opcional)
    Serial.println("üîß Intentando obtener configuraci√≥n actualizada del backend...");
    if (obtenerConfiguracionDesdeBackend()) {
      Serial.println("‚úÖ Configuraci√≥n actualizada obtenida del backend");
      // Si la configuraci√≥n del backend es diferente, reconectar WiFi
      if (WiFi.SSID() != wifiSSID) {
        Serial.println("üîÑ SSID diferente, reconectando WiFi...");
        WiFi.disconnect();
        delay(1000);
        conectarWiFi();
      }
    } else {
      Serial.println("‚ö†Ô∏è No se pudo obtener configuraci√≥n del backend, usando configuraci√≥n inicial");
      // Usar configuraci√≥n inicial como respaldo
      configuracionCargada = true;
    }
  } else {
    Serial.println("‚ùå Error conectando WiFi con configuraci√≥n inicial");
  }
  
  // Configurar sensores iniciales
  configurarSensoresIniciales();
  
  // Inicializar sensores
  dht.begin();
  
  
  
  // üîß NUEVO: Registrar sensores en el backend autom√°ticamente
  Serial.println("üîß Registrando sensores en el backend...");
  
  // üîß NUEVO: Verificar conexi√≥n al backend primero
  if (verificarConexionBackend()) {
    if (registrarSensoresEnBackend()) {
      Serial.println("‚úÖ Sensores registrados exitosamente en el backend");
    } else {
      Serial.println("‚ö†Ô∏è Error registrando sensores en el backend, continuando...");
    }
  } else {
    Serial.println("‚ùå No se puede conectar al backend. Los sensores no se registrar√°n.");
    Serial.println("üîß Los sensores se registrar√°n cuando se restablezca la conexi√≥n.");
  }
  
  Serial.println("‚úÖ Setup completado");

  // Sincronizar tiempo v√≠a NTP para timestamps correctos
  Serial.println("‚è±Ô∏è Configurando NTP...");
  configTime(0, 0, "pool.ntp.org", "time.nist.gov");

  
}

void loop() {
  unsigned long tiempoActual = millis();
  
  // Verificar conexi√≥n WiFi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi desconectado, reconectando...");
    conectarWiFi();
    delay(5000);
    return;
  }
  
  // Intentar obtener configuraci√≥n del backend si no est√° cargada (solo como respaldo)
  if (!configuracionCargada && (tiempoActual - ultimoIntentoConfig > 60000)) { // 1 minuto
    ultimoIntentoConfig = tiempoActual;
    intentosConfig++;
    
    Serial.println("üîÑ Intento " + String(intentosConfig) + " de obtener configuraci√≥n del backend");
    
    if (obtenerConfiguracionDesdeBackend()) {
      intentosConfig = 0;
      Serial.println("‚úÖ Configuraci√≥n obtenida del backend");
    } else {
      Serial.println("‚ö†Ô∏è No se pudo obtener configuraci√≥n del backend, usando configuraci√≥n inicial");
      // Usar configuraci√≥n inicial como respaldo
      configuracionCargada = true;
    }
    
    if (intentosConfig >= MAX_INTENTOS_CONFIG) {
      Serial.println("‚ùå M√°ximo de intentos alcanzado, usando configuraci√≥n inicial");
      configuracionCargada = true;
      intentosConfig = 0;
    }
  }
  
  // Enviar lecturas si la configuraci√≥n est√° cargada
  if (configuracionCargada && (tiempoActual - ultimaLectura > intervaloLecturas)) {
    ultimaLectura = tiempoActual;
    
    // üîß USAR LECTURAS M√öLTIPLES EN LUGAR DE LECTURAS INDIVIDUALES
    if (enviarLecturasMultiples()) {
      Serial.println("‚úÖ Ciclo de lecturas m√∫ltiples completado");
    } else {
      Serial.println("‚ùå Error en ciclo de lecturas m√∫ltiples");
      // Fallback a lecturas individuales si fallan las m√∫ltiples
      if (enviarLecturas()) {
        Serial.println("‚úÖ Fallback a lecturas individuales exitoso");
      } else {
        Serial.println("‚ùå Error en fallback a lecturas individuales");
      }
    }
  }
  
  

  delay(1000); // Peque√±a pausa para estabilidad
}
