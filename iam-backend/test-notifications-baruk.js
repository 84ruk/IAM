wconst axios = require('axios');

// Configuraci√≥n para las pruebas
const BASE_URL = 'http://localhost:3001';
const TEST_EMAIL = 'contactobaruk@gmail.com';
const TEST_PHONE = '+524441882114';

// Token de prueba (necesitar√°s un token v√°lido de un usuario admin)
const TEST_TOKEN = 'tu-token-jwt-aqui'; // Reemplaza con un token v√°lido

async function testNotifications() {
  console.log('üöÄ Iniciando pruebas de notificaciones para Baruk...\n');

  try {
    // 1. Probar email de bienvenida
    console.log('üìß 1. Probando email de bienvenida...');
    const welcomeResponse = await axios.post(
      `${BASE_URL}/notifications/test-email`,
      {
        email: TEST_EMAIL,
        tipo: 'welcome'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Email de bienvenida:', welcomeResponse.data);

    // 2. Probar alerta de stock cr√≠tico
    console.log('\nüìß 2. Probando alerta de stock cr√≠tico...');
    const stockResponse = await axios.post(
      `${BASE_URL}/notifications/test-email`,
      {
        email: TEST_EMAIL,
        tipo: 'stock-critical'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Alerta de stock cr√≠tico:', stockResponse.data);

    // 3. Probar predicci√≥n de quiebre de stock
    console.log('\nüìß 3. Probando predicci√≥n de quiebre de stock...');
    const predictionResponse = await axios.post(
      `${BASE_URL}/notifications/test-email`,
      {
        email: TEST_EMAIL,
        tipo: 'stockout-prediction'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Predicci√≥n de quiebre:', predictionResponse.data);

    // 4. Probar alerta de sensor
    console.log('\nüìß 4. Probando alerta de sensor...');
    const sensorResponse = await axios.post(
      `${BASE_URL}/notifications/test-email`,
      {
        email: TEST_EMAIL,
        tipo: 'sensor-alert'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Alerta de sensor:', sensorResponse.data);

    // 5. Probar alerta de caducidad
    console.log('\nüìß 5. Probando alerta de caducidad...');
    const expiryResponse = await axios.post(
      `${BASE_URL}/notifications/test-email`,
      {
        email: TEST_EMAIL,
        tipo: 'expiry-alert'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Alerta de caducidad:', expiryResponse.data);

    // 6. Probar alerta de KPI
    console.log('\nüìß 6. Probando alerta de KPI...');
    const kpiResponse = await axios.post(
      `${BASE_URL}/notifications/test-email`,
      {
        email: TEST_EMAIL,
        tipo: 'kpi-alert'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Alerta de KPI:', kpiResponse.data);

    // 7. Obtener estad√≠sticas de notificaciones
    console.log('\nüìä 7. Obteniendo estad√≠sticas de notificaciones...');
    const statsResponse = await axios.get(
      `${BASE_URL}/notifications/stats`,
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`
        }
      }
    );
    console.log('‚úÖ Estad√≠sticas:', statsResponse.data);

    // 8. Obtener resumen de alertas
    console.log('\nüìä 8. Obteniendo resumen de alertas...');
    const summaryResponse = await axios.get(
      `${BASE_URL}/notifications/summary`,
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`
        }
      }
    );
    console.log('‚úÖ Resumen de alertas:', summaryResponse.data);

    console.log('\nüéâ ¬°Todas las pruebas completadas exitosamente!');
    console.log(`üìß Emails enviados a: ${TEST_EMAIL}`);
    console.log(`üì± SMS configurado para: ${TEST_PHONE}`);

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Para obtener un token v√°lido:');
      console.log('1. Inicia sesi√≥n en la aplicaci√≥n');
      console.log('2. Copia el token JWT de las cookies o headers');
      console.log('3. Reemplaza TEST_TOKEN en este script');
    }
  }
}

// Funci√≥n para probar configuraci√≥n de alertas
async function testAlertConfiguration() {
  console.log('\n‚öôÔ∏è Probando configuraci√≥n de alertas...\n');

  try {
    // Obtener configuraci√≥n actual
    const configResponse = await axios.get(
      `${BASE_URL}/notifications/config`,
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`
        }
      }
    );
    console.log('‚úÖ Configuraci√≥n actual:', configResponse.data);

    // Actualizar configuraci√≥n para incluir tu email y tel√©fono
    const updateResponse = await axios.put(
      `${BASE_URL}/notifications/config/1`, // Asumiendo que existe una configuraci√≥n con ID 1
      {
        destinatarios: [TEST_EMAIL, TEST_PHONE],
        activo: true,
        frecuencia: 'INMEDIATA'
      },
      {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Configuraci√≥n actualizada:', updateResponse.data);

  } catch (error) {
    console.error('‚ùå Error en configuraci√≥n:', error.response?.data || error.message);
  }
}

// Ejecutar pruebas
async function runAllTests() {
  await testNotifications();
  await testAlertConfiguration();
}

// Verificar si la aplicaci√≥n est√° corriendo
async function checkAppStatus() {
  try {
    const response = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Aplicaci√≥n funcionando:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå Aplicaci√≥n no disponible:', error.message);
    console.log('üí° Aseg√∫rate de que la aplicaci√≥n est√© corriendo en http://localhost:3001');
    return false;
  }
}

// Funci√≥n principal
async function main() {
  console.log('üîç Verificando estado de la aplicaci√≥n...');
  const appRunning = await checkAppStatus();
  
  if (appRunning) {
    console.log('\nüöÄ Iniciando pruebas de notificaciones...\n');
    await runAllTests();
  } else {
    console.log('\n‚ùå No se pueden ejecutar las pruebas. La aplicaci√≥n no est√° disponible.');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testNotifications, testAlertConfiguration, checkAppStatus }; 