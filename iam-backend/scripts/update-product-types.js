const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function updateProductTypes() {
  try {
    console.log('üîÑ Actualizando tipos de producto...\n');

    // 1. Actualizar medicamentos
    console.log('üîí Actualizando medicamentos...');
    
    const medicamentos = await prisma.producto.findMany({
      where: {
        etiquetas: {
          hasSome: ['controlado', 'analg√©sico', 'antiinflamatorio', 'protector g√°strico', 'antial√©rgico', 'ansiol√≠tico', 'opioide']
        }
      }
    });

    for (const producto of medicamentos) {
      await prisma.producto.update({
        where: { id: producto.id },
        data: { tipoProducto: 'MEDICAMENTO' }
      });
      console.log(`   ‚úÖ ${producto.nombre} ‚Üí MEDICAMENTO`);
    }

    // 2. Actualizar suplementos
    console.log('\nüíä Actualizando suplementos...');
    
    const suplementos = await prisma.producto.findMany({
      where: {
        etiquetas: {
          hasSome: ['vitamina', 'omega 3', 'magnesio']
        }
      }
    });

    for (const producto of suplementos) {
      await prisma.producto.update({
        where: { id: producto.id },
        data: { tipoProducto: 'SUPLEMENTO' }
      });
      console.log(`   ‚úÖ ${producto.nombre} ‚Üí SUPLEMENTO`);
    }

    // 3. Actualizar equipos m√©dicos
    console.log('\nüè• Actualizando equipos m√©dicos...');
    
    const equiposMedicos = await prisma.producto.findMany({
      where: {
        etiquetas: {
          hasSome: ['tensi√≥metro', 'gluc√≥metro', 'term√≥metro', 'nebulizador', 'presi√≥n arterial', 'diabetes', 'glucosa', 'fiebre', 'infrarrojo', 'asma', 'respiratorio']
        }
      }
    });

    for (const producto of equiposMedicos) {
      await prisma.producto.update({
        where: { id: producto.id },
        data: { tipoProducto: 'EQUIPO_MEDICO' }
      });
      console.log(`   ‚úÖ ${producto.nombre} ‚Üí EQUIPO_MEDICO`);
    }

    // 4. Actualizar productos de cuidado personal
    console.log('\nüß¥ Actualizando productos de cuidado personal...');
    
    const cuidadoPersonal = await prisma.producto.findMany({
      where: {
        etiquetas: {
          hasSome: ['antibacterial', 'alcohol', 'desinfectante', 'cubrebocas', 'protecci√≥n', 'toallas', 'beb√©s', 'higiene', 'limpieza', 'manos']
        }
      }
    });

    for (const producto of cuidadoPersonal) {
      await prisma.producto.update({
        where: { id: producto.id },
        data: { tipoProducto: 'CUIDADO_PERSONAL' }
      });
      console.log(`   ‚úÖ ${producto.nombre} ‚Üí CUIDADO_PERSONAL`);
    }

    // 5. Verificar distribuci√≥n final
    console.log('\nüìä Distribuci√≥n Final de Productos:');
    console.log('====================================');
    
    const productosFinales = await prisma.producto.findMany({
      select: {
        tipoProducto: true
      }
    });

    const distribucionFinal = {};
    productosFinales.forEach(p => {
      distribucionFinal[p.tipoProducto] = (distribucionFinal[p.tipoProducto] || 0) + 1;
    });

    Object.entries(distribucionFinal).forEach(([tipo, cantidad]) => {
      console.log(`   ${tipo}: ${cantidad} productos`);
    });

    // 6. An√°lisis espec√≠fico de farmacia
    console.log('\nüíä An√°lisis Espec√≠fico de Farmacia:');
    console.log('=====================================');
    
    const farmacia = await prisma.empresa.findFirst({
      where: { nombre: { contains: 'CliniFarm' } }
    });

    if (farmacia) {
      const productosFarmacia = await prisma.producto.findMany({
        where: { empresaId: farmacia.id },
        select: {
          nombre: true,
          tipoProducto: true,
          etiquetas: true
        }
      });

      const farmaciaPorTipo = {};
      productosFarmacia.forEach(p => {
        farmaciaPorTipo[p.tipoProducto] = (farmaciaPorTipo[p.tipoProducto] || 0) + 1;
      });

      Object.entries(farmaciaPorTipo).forEach(([tipo, cantidad]) => {
        console.log(`   ${tipo}: ${cantidad} productos`);
      });

      // Mostrar algunos ejemplos
      console.log('\nüìã Ejemplos por Tipo:');
      console.log('=====================');
      
      const medicamentosFarmacia = productosFarmacia.filter(p => p.tipoProducto === 'MEDICAMENTO');
      const suplementosFarmacia = productosFarmacia.filter(p => p.tipoProducto === 'SUPLEMENTO');
      const equiposFarmacia = productosFarmacia.filter(p => p.tipoProducto === 'EQUIPO_MEDICO');
      const cuidadoFarmacia = productosFarmacia.filter(p => p.tipoProducto === 'CUIDADO_PERSONAL');

      console.log('   üîí MEDICAMENTO:');
      medicamentosFarmacia.slice(0, 3).forEach(p => console.log(`      - ${p.nombre}`));
      
      console.log('   üíä SUPLEMENTO:');
      suplementosFarmacia.slice(0, 3).forEach(p => console.log(`      - ${p.nombre}`));
      
      console.log('   üè• EQUIPO_MEDICO:');
      equiposFarmacia.slice(0, 3).forEach(p => console.log(`      - ${p.nombre}`));
      
      console.log('   üß¥ CUIDADO_PERSONAL:');
      cuidadoFarmacia.slice(0, 3).forEach(p => console.log(`      - ${p.nombre}`));
    }

    console.log('\nüéâ Actualizaci√≥n completada exitosamente!');
    console.log('=========================================');
    console.log('‚úÖ Los productos ahora tienen tipos m√°s espec√≠ficos');
    console.log('‚úÖ Los KPIs pueden ser m√°s precisos por categor√≠a');
    console.log('‚úÖ Mejor control para medicamentos controlados');
    console.log('‚úÖ An√°lisis m√°s detallado por tipo de producto');

  } catch (error) {
    console.error('‚ùå Error actualizando tipos de producto:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateProductTypes(); 