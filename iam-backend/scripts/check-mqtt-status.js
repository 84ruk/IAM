#!/usr/bin/env node

/**
 * Script para verificar el estado del m√≥dulo MQTT
 * Uso: node scripts/check-mqtt-status.js
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n MQTT...\n');

// Verificar archivo .env
const envPath = path.join(__dirname, '..', '.env');
const envExists = fs.existsSync(envPath);

if (!envExists) {
  console.log('‚ùå No se encontr√≥ archivo .env');
  console.log('üí° Copia env.example a .env y configura las variables');
  process.exit(1);
}

// Leer variables de entorno
const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};

envContent.split('\n').forEach(line => {
  const match = line.match(/^([^#][^=]+)=(.*)$/);
  if (match) {
    envVars[match[1].trim()] = match[2].trim().replace(/"/g, '');
  }
});

console.log('üìã Variables de entorno MQTT:');
console.log('================================');

const mqttVars = [
  'MQTT_ENABLED',
  'MQTT_HOST', 
  'MQTT_PORT',
  'MQTT_USERNAME',
  'MQTT_PASSWORD',
  'MQTT_RECONNECT_PERIOD',
  'MQTT_CONNECT_TIMEOUT',
  'MQTT_MAX_RECONNECT_ATTEMPTS'
];

mqttVars.forEach(varName => {
  const value = envVars[varName];
  if (value !== undefined) {
    console.log(`‚úÖ ${varName}=${value}`);
  } else {
    console.log(`‚ùå ${varName}=<no configurado>`);
  }
});

console.log('\nüîß Estado del m√≥dulo:');
console.log('=====================');

const enabled = envVars.MQTT_ENABLED === 'true';
const host = envVars.MQTT_HOST;
const port = envVars.MQTT_PORT;

if (!enabled) {
  console.log('üü° MQTT est√° DESHABILITADO');
  console.log('   Para habilitarlo, configura MQTT_ENABLED=true');
} else if (!host || !port) {
  console.log('üü° MQTT est√° HABILITADO pero INCOMPLETO');
  console.log('   Configura MQTT_HOST y MQTT_PORT');
} else {
  console.log('üü¢ MQTT est√° HABILITADO y CONFIGURADO');
  console.log(`   Broker: ${host}:${port}`);
}

console.log('\nüìö Documentaci√≥n:');
console.log('==================');
console.log('üìñ Ver MQTT_CONFIGURATION.md para m√°s detalles');
console.log('üåê API endpoints:');
console.log('   GET  /mqtt-sensor/status');
console.log('   POST /mqtt-sensor/toggle');

console.log('\nüöÄ Para probar la conexi√≥n:');
console.log('==========================');
if (enabled && host && port) {
  console.log(`1. Aseg√∫rate de que el broker MQTT est√© ejecut√°ndose en ${host}:${port}`);
  console.log('2. Inicia la aplicaci√≥n: npm run start:dev');
  console.log('3. Verifica los logs para ver el estado de conexi√≥n');
  console.log('4. Usa la API para verificar el estado: GET /mqtt-sensor/status');
} else {
  console.log('1. Configura las variables MQTT_ENABLED=true, MQTT_HOST y MQTT_PORT');
  console.log('2. Inicia un broker MQTT (ej: mosquitto)');
  console.log('3. Reinicia la aplicaci√≥n');
} 