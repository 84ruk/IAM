const axios = require('axios');

const BASE_URL = 'http://localhost:3001';
const TEST_EMAIL = 'admin@elpeso.com';
const TEST_PASSWORD = 'Carpinterito12?';

let currentToken = null;
let currentRefreshToken = null;

async function login() {
  try {
    console.log('üîê Iniciando sesi√≥n...');
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD,
    });

    currentToken = response.data.access_token;
    currentRefreshToken = response.data.refresh_token;
    
    console.log('‚úÖ Login exitoso');
    console.log(`üìù Token: ${currentToken ? currentToken.substring(0, 20) + '...' : 'No disponible'}`);
    console.log(`üîÑ Refresh Token: ${currentRefreshToken ? currentRefreshToken.substring(0, 20) + '...' : 'No disponible'}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error en login:', error.response?.data || error.message);
    throw error;
  }
}

async function checkSessionLimits() {
  try {
    console.log('\nüìä Verificando l√≠mites de sesi√≥n...');
    const response = await axios.get(`${BASE_URL}/sessions/limits`, {
      headers: { Authorization: `Bearer ${currentToken}` }
    });

    console.log('‚úÖ L√≠mites de sesi√≥n:');
    console.log(`   - Sesiones actuales: ${response.data.currentSessions}`);
    console.log(`   - M√°ximo permitido: ${response.data.maxSessions}`);
    console.log(`   - Permitido: ${response.data.allowed}`);
    console.log(`   - Necesita revocaci√≥n: ${response.data.needsRevocation}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error verificando l√≠mites:', error.response?.data || error.message);
    throw error;
  }
}

async function getMySessions() {
  try {
    console.log('\nüìã Obteniendo sesiones activas...');
    const response = await axios.get(`${BASE_URL}/sessions/my-sessions`, {
      headers: { Authorization: `Bearer ${currentToken}` }
    });

    console.log(`‚úÖ Sesiones activas (${response.data.length}):`);
    response.data.forEach((session, index) => {
      console.log(`   ${index + 1}. ID: ${session.id ? session.id.substring(0, 20) + '...' : 'No disponible'}`);
      console.log(`      Creada: ${new Date(session.createdAt).toLocaleString()}`);
      console.log(`      Activa: ${session.isActive}`);
    });
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo sesiones:', error.response?.data || error.message);
    throw error;
  }
}

async function attemptSecondLogin() {
  try {
    console.log('\nüîÑ Intentando segundo login (deber√≠a revocar la primera sesi√≥n)...');
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD,
    });

    const newToken = response.data.access_token;
    const newRefreshToken = response.data.refresh_token;
    
    console.log('‚úÖ Segundo login exitoso');
    console.log(`üìù Nuevo Token: ${newToken ? newToken.substring(0, 20) + '...' : 'No disponible'}`);
    console.log(`üîÑ Nuevo Refresh Token: ${newRefreshToken ? newRefreshToken.substring(0, 20) + '...' : 'No disponible'}`);
    
    // Verificar que el token anterior ya no funciona
    try {
      await axios.get(`${BASE_URL}/sessions/limits`, {
        headers: { Authorization: `Bearer ${currentToken}` }
      });
      console.log('‚ö†Ô∏è  El token anterior a√∫n funciona (esto no deber√≠a pasar)');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ El token anterior fue revocado correctamente');
      } else {
        console.log('‚ùå Error inesperado con token anterior:', error.response?.data || error.message);
      }
    }
    
    // Actualizar tokens para continuar pruebas
    currentToken = newToken;
    currentRefreshToken = newRefreshToken;
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error en segundo login:', error.response?.data || error.message);
    throw error;
  }
}

async function testDashboardAccess() {
  try {
    console.log('\nüìä Probando acceso al dashboard...');
    const response = await axios.get(`${BASE_URL}/dashboard/kpis`, {
      headers: { Authorization: `Bearer ${currentToken}` }
    });

    console.log('‚úÖ Acceso al dashboard exitoso');
    console.log(`üìà KPIs obtenidos: ${Object.keys(response.data).length}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error accediendo al dashboard:', error.response?.data || error.message);
    throw error;
  }
}

async function testSessionStats() {
  try {
    console.log('\nüìà Obteniendo estad√≠sticas de sesiones...');
    const response = await axios.get(`${BASE_URL}/sessions/stats`, {
      headers: { Authorization: `Bearer ${currentToken}` }
    });

    console.log('‚úÖ Estad√≠sticas de sesiones:');
    console.log(`   - Sesiones activas totales: ${response.data.totalActiveSessions}`);
    console.log(`   - Sesiones expiradas: ${response.data.totalExpiredSessions}`);
    console.log(`   - Sesiones por rol:`, response.data.sessionsByRole);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error.response?.data || error.message);
    throw error;
  }
}

async function runTests() {
  console.log('üöÄ Iniciando pruebas de l√≠mite de 1 sesi√≥n por cuenta');
  console.log(`üë§ Usuario: ${TEST_EMAIL}`);
  console.log('=' .repeat(60));

  try {
    // 1. Primer login
    await login();
    
    // 2. Verificar l√≠mites iniciales
    await checkSessionLimits();
    
    // 3. Ver sesiones activas
    await getMySessions();
    
    // 4. Probar acceso al dashboard
    await testDashboardAccess();
    
    // 5. Intentar segundo login (deber√≠a revocar el primero)
    await attemptSecondLogin();
    
    // 6. Verificar l√≠mites despu√©s del segundo login
    await checkSessionLimits();
    
    // 7. Ver sesiones activas despu√©s del segundo login
    await getMySessions();
    
    // 8. Probar acceso al dashboard con nuevo token
    await testDashboardAccess();
    
    // 9. Ver estad√≠sticas globales
    await testSessionStats();
    
    console.log('\nüéâ Todas las pruebas completadas exitosamente!');
    console.log('‚úÖ El sistema est√° funcionando correctamente con 1 sesi√≥n por cuenta');
    
  } catch (error) {
    console.error('\nüí• Error durante las pruebas:', error.message);
    process.exit(1);
  }
}

// Ejecutar pruebas
runTests(); 