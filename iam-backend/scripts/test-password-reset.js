const axios = require('axios');

// Configuraci√≥n
const BASE_URL = process.env.BASE_URL || 'http://localhost:3001';
const TEST_EMAIL = process.env.TEST_EMAIL || 'admin@test.com';
const TEST_PASSWORD = process.env.TEST_PASSWORD || 'Admin123!';

console.log('üß™ Probando flujo completo de recuperaci√≥n de contrase√±a...\n');

async function testPasswordResetFlow() {
  try {
    console.log('1Ô∏è‚É£ Iniciando sesi√≥n para obtener token...');
    
    // Login para obtener token
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD,
    });

    if (!loginResponse.data.token) {
      throw new Error('No se pudo obtener el token de autenticaci√≥n');
    }

    const token = loginResponse.data.token;
    console.log('‚úÖ Login exitoso\n');

    console.log('2Ô∏è‚É£ Solicitando recuperaci√≥n de contrase√±a...');
    
    // Solicitar recuperaci√≥n de contrase√±a
    const forgotPasswordResponse = await axios.post(`${BASE_URL}/auth/forgot-password`, {
      email: TEST_EMAIL,
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    console.log('üìß Respuesta del servidor:', forgotPasswordResponse.data);
    
    if (forgotPasswordResponse.data.success) {
      console.log('‚úÖ Solicitud de recuperaci√≥n enviada exitosamente');
    } else {
      console.log('‚ùå Error en la solicitud de recuperaci√≥n:', forgotPasswordResponse.data.message);
    }

    console.log('\n3Ô∏è‚É£ Verificando configuraci√≥n de notificaciones...');
    
    // Verificar configuraci√≥n de notificaciones
    const configResponse = await axios.get(`${BASE_URL}/notifications/config`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    console.log('‚öôÔ∏è Configuraci√≥n de alertas:', configResponse.data.length, 'tipos configurados');

    console.log('\n4Ô∏è‚É£ Probando env√≠o de email de prueba...');
    
    // Probar env√≠o de email de prueba
    const testEmailResponse = await axios.post(`${BASE_URL}/notifications/test-email`, {
      email: TEST_EMAIL,
      tipo: 'welcome',
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    console.log('üìß Resultado del email de prueba:', testEmailResponse.data);

    console.log('\n5Ô∏è‚É£ Verificando historial de notificaciones...');
    
    // Verificar historial
    const historyResponse = await axios.get(`${BASE_URL}/notifications/history?limit=5`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    console.log('üìä Historial de notificaciones:', historyResponse.data.alertas.length, 'registros');

    console.log('\n6Ô∏è‚É£ Verificando estad√≠sticas...');
    
    // Verificar estad√≠sticas
    const statsResponse = await axios.get(`${BASE_URL}/notifications/stats?days=7`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    console.log('üìà Estad√≠sticas de notificaciones:', statsResponse.data);

    console.log('\nüéâ ¬°Prueba completada exitosamente!');
    console.log('\nüìù Resumen:');
    console.log('   ‚Ä¢ Login: ‚úÖ');
    console.log('   ‚Ä¢ Solicitud de recuperaci√≥n: ‚úÖ');
    console.log('   ‚Ä¢ Configuraci√≥n de notificaciones: ‚úÖ');
    console.log('   ‚Ä¢ Email de prueba: ‚úÖ');
    console.log('   ‚Ä¢ Historial: ‚úÖ');
    console.log('   ‚Ä¢ Estad√≠sticas: ‚úÖ');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('\nüí° Sugerencia: Verifica que las credenciales de prueba sean correctas');
      console.log('   Usa las variables de entorno: TEST_EMAIL y TEST_PASSWORD');
    }
    
    if (error.response?.status === 500) {
      console.log('\nüí° Sugerencia: Verifica que el servidor est√© ejecut√°ndose y las variables de entorno est√©n configuradas');
    }
  }
}

// Ejecutar la prueba
testPasswordResetFlow(); 