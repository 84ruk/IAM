const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000';
const JWT_TOKEN = process.env.JWT_TOKEN || 'tu-jwt-token-aqui';

const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Authorization': `Bearer ${JWT_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testSensorReception() {
  console.log('üß™ Probando Recepci√≥n de Datos de Sensor F√≠sico\n');

  try {
    // 1. Verificar autenticaci√≥n
    console.log('1Ô∏è‚É£ Verificando autenticaci√≥n...');
    try {
      const authTest = await api.get('/users/profile');
      console.log('‚úÖ Autenticaci√≥n correcta');
      console.log('üë§ Usuario:', authTest.data.email);
      console.log('üè¢ Empresa ID:', authTest.data.empresaId);
    } catch (error) {
      console.log('‚ùå Error de autenticaci√≥n. Verifica tu JWT_TOKEN');
      console.log('üí° Ejecuta: export JWT_TOKEN="tu-token-aqui"');
      return;
    }

    // 2. Listar sensores disponibles
    console.log('\n2Ô∏è‚É£ Obteniendo sensores disponibles...');
    try {
      const sensores = await api.get('/mqtt-sensor/sensores/listar');
      console.log('‚úÖ Sensores obtenidos:', sensores.data.length, 'sensores');
      
      if (sensores.data.length === 0) {
        console.log('‚ö†Ô∏è No hay sensores registrados.');
        console.log('üí° Ejecuta: node scripts/configurar-sensor-fisico.js');
        return;
      }

      console.log('üìã Sensores disponibles:');
      sensores.data.forEach(sensor => {
        console.log(`   - ${sensor.nombre} (${sensor.tipo}) - ID: ${sensor.id}`);
      });
    } catch (error) {
      console.log('‚ùå Error obteniendo sensores:', error.response?.data?.message || error.message);
      return;
    }

    // 3. Verificar estado MQTT
    console.log('\n3Ô∏è‚É£ Verificando estado MQTT...');
    try {
      const mqttStatus = await api.get('/mqtt-sensor/status');
      console.log('‚úÖ Estado MQTT:', mqttStatus.data);
      
      if (!mqttStatus.data.enabled) {
        console.log('‚ö†Ô∏è MQTT no est√° habilitado');
        console.log('üí° Verifica la configuraci√≥n en .env');
      }
      
      if (!mqttStatus.data.connected) {
        console.log('‚ö†Ô∏è MQTT no est√° conectado');
        console.log('üí° Verifica las credenciales MQTT');
      }
    } catch (error) {
      console.log('‚ùå Error verificando estado MQTT:', error.response?.data?.message || error.message);
    }

    // 4. Simular datos de sensor
    console.log('\n4Ô∏è‚É£ Simulando datos de sensor...');
    const primerSensor = sensores.data[0];
    
    try {
      const datosSimulados = {
        tipo: primerSensor.tipo,
        valor: Math.random() * 50 + 10, // Valor aleatorio
        unidad: primerSensor.tipo === 'TEMPERATURA' ? '¬∞C' : 
                primerSensor.tipo === 'HUMEDAD' ? '%' : 
                primerSensor.tipo === 'PESO' ? 'kg' : 'Pa',
        sensorId: primerSensor.id,
        ubicacionId: primerSensor.ubicacionId
      };

      const lectura = await api.post('/mqtt-sensor/lecturas/registrar', datosSimulados);
      console.log('‚úÖ Lectura simulada registrada');
      console.log('üìä Datos:', {
        tipo: lectura.data.tipo,
        valor: lectura.data.valor,
        unidad: lectura.data.unidad,
        fecha: lectura.data.fecha
      });
    } catch (error) {
      console.log('‚ùå Error registrando lectura simulada:', error.response?.data?.message || error.message);
    }

    // 5. Verificar lecturas recientes
    console.log('\n5Ô∏è‚É£ Verificando lecturas recientes...');
    try {
      const lecturas = await api.get('/mqtt-sensor/lecturas/listar?limite=5');
      console.log('‚úÖ Lecturas obtenidas:', lecturas.data.length, 'lecturas');
      
      if (lecturas.data.length > 0) {
        console.log('üìà √öltimas lecturas:');
        lecturas.data.forEach(lectura => {
          console.log(`   - ${lectura.tipo}: ${lectura.valor} ${lectura.unidad} (${new Date(lectura.fecha).toLocaleString()})`);
        });
      }
    } catch (error) {
      console.log('‚ùå Error obteniendo lecturas:', error.response?.data?.message || error.message);
    }

    // 6. Verificar analytics
    console.log('\n6Ô∏è‚É£ Verificando analytics...');
    try {
      const analytics = await api.get('/mqtt-sensor/analytics');
      console.log('‚úÖ Analytics obtenidos');
      console.log('üìä M√©tricas:');
      console.log(`   - Total lecturas: ${analytics.data.totalLecturas}`);
      console.log(`   - Lecturas √∫ltimas 24h: ${analytics.data.lecturasUltimas24h}`);
      console.log(`   - Alertas activas: ${analytics.data.alertasActivas}`);
      console.log(`   - Temperatura promedio: ${analytics.data.temperaturaPromedio}¬∞C`);
      console.log(`   - Humedad promedio: ${analytics.data.humedadPromedio}%`);
    } catch (error) {
      console.log('‚ùå Error obteniendo analytics:', error.response?.data?.message || error.message);
    }

    // 7. Verificar dashboard
    console.log('\n7Ô∏è‚É£ Verificando dashboard...');
    try {
      const dashboard = await api.get('/mqtt-sensor/dashboard/ubicaciones');
      console.log('‚úÖ Dashboard obtenido');
      console.log('üè¢ Ubicaciones en dashboard:', dashboard.data.ubicaciones.length);
      
      if (dashboard.data.ubicaciones.length > 0) {
        console.log('üìç Ubicaciones:');
        dashboard.data.ubicaciones.forEach(ubicacion => {
          console.log(`   - ${ubicacion.nombre}: ${ubicacion.totalSensores} sensores, ${ubicacion.alertasActivas} alertas`);
        });
      }
    } catch (error) {
      console.log('‚ùå Error obteniendo dashboard:', error.response?.data?.message || error.message);
    }

    console.log('\nüéâ ¬°Prueba de recepci√≥n completada!');
    console.log('\nüìù RESUMEN:');
    console.log('   ‚úÖ Autenticaci√≥n funcionando');
    console.log('   ‚úÖ Sensores registrados');
    console.log('   ‚úÖ MQTT configurado');
    console.log('   ‚úÖ Lecturas funcionando');
    console.log('   ‚úÖ Analytics disponibles');
    console.log('   ‚úÖ Dashboard funcionando');
    
    console.log('\nüöÄ ¬°El sistema est√° listo para recibir datos de tu sensor f√≠sico!');
    console.log('\nüìù PR√ìXIMOS PASOS:');
    console.log('   1. Conectar tu sensor f√≠sico al ESP32/Arduino');
    console.log('   2. Configurar el c√≥digo con tus credenciales WiFi y MQTT');
    console.log('   3. Subir el c√≥digo al hardware');
    console.log('   4. Verificar que los datos lleguen al dashboard');

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// Funci√≥n para monitorear datos en tiempo real
async function monitorearTiempoReal(sensorId) {
  console.log(`üîç Monitoreando sensor ID: ${sensorId} en tiempo real...`);
  console.log('Presiona Ctrl+C para detener\n');

  const interval = setInterval(async () => {
    try {
      const sensor = await api.get(`/mqtt-sensor/sensores/sensor/${sensorId}`);
      const lecturas = sensor.data.lecturas;
      
      if (lecturas.length > 0) {
        const ultimaLectura = lecturas[0];
        console.log(`[${new Date().toLocaleTimeString()}] ${ultimaLectura.tipo}: ${ultimaLectura.valor} ${ultimaLectura.unidad}`);
      } else {
        console.log(`[${new Date().toLocaleTimeString()}] No hay lecturas recientes`);
      }
    } catch (error) {
      console.log(`[${new Date().toLocaleTimeString()}] Error: ${error.message}`);
    }
  }, 5000); // Verificar cada 5 segundos

  // Manejar interrupci√≥n
  process.on('SIGINT', () => {
    clearInterval(interval);
    console.log('\nüõë Monitoreo detenido');
    process.exit(0);
  });
}

// Funci√≥n para mostrar informaci√≥n de debugging
function mostrarInfoDebugging() {
  console.log('üîß INFORMACI√ìN DE DEBUGGING\n');

  console.log('1Ô∏è‚É£ Verificar conexi√≥n MQTT:');
  console.log(`
   curl -X GET "http://localhost:3000/mqtt-sensor/status" \\
     -H "Authorization: Bearer ${JWT_TOKEN}"
  `);

  console.log('\n2Ô∏è‚É£ Verificar sensores registrados:');
  console.log(`
   curl -X GET "http://localhost:3000/mqtt-sensor/sensores/listar" \\
     -H "Authorization: Bearer ${JWT_TOKEN}"
  `);

  console.log('\n3Ô∏è‚É£ Verificar lecturas recientes:');
  console.log(`
   curl -X GET "http://localhost:3000/mqtt-sensor/lecturas/listar?limite=10" \\
     -H "Authorization: Bearer ${JWT_TOKEN}"
  `);

  console.log('\n4Ô∏è‚É£ Verificar analytics:');
  console.log(`
   curl -X GET "http://localhost:3000/mqtt-sensor/analytics" \\
     -H "Authorization: Bearer ${JWT_TOKEN}"
  `);

  console.log('\n5Ô∏è‚É£ Logs del servidor:');
  console.log(`
   # En la terminal donde ejecutas npm run start:dev
   # Buscar mensajes como:
   # - "Temperatura registrada: 25.5¬∞C"
   # - "Humedad registrada: 60.0%"
   # - "Peso registrado: 1.5kg"
  `);

  console.log('\n6Ô∏è‚É£ Problemas comunes:');
  console.log(`
   ‚ùå MQTT no conectado:
      - Verificar credenciales en .env
      - Verificar que el broker est√© funcionando
   
   ‚ùå No llegan datos:
      - Verificar que el ESP32 est√© conectado a WiFi
      - Verificar que las credenciales MQTT sean correctas
      - Verificar que el t√≥pico sea correcto
   
   ‚ùå Datos incorrectos:
      - Verificar la calibraci√≥n del sensor
      - Verificar las unidades en el c√≥digo Arduino
  `);
}

// Ejecutar pruebas
if (require.main === module) {
  if (process.argv.includes('--monitor')) {
    const sensorId = process.argv[3] || 1;
    monitorearTiempoReal(sensorId);
  } else if (process.argv.includes('--debug')) {
    mostrarInfoDebugging();
  } else {
    testSensorReception();
  }
}

module.exports = { testSensorReception, monitorearTiempoReal, mostrarInfoDebugging }; 