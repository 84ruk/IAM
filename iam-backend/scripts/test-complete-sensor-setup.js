const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000';
const JWT_TOKEN = process.env.JWT_TOKEN || 'tu-jwt-token-aqui';

const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    'Authorization': `Bearer ${JWT_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testCompleteSensorSetup() {
  console.log('üß™ Prueba Completa de Configuraci√≥n de Sensores\n');

  try {
    // 1. Verificar que el servidor est√© funcionando
    console.log('1Ô∏è‚É£ Verificando que el servidor est√© funcionando...');
    try {
      const healthCheck = await axios.get(`${BASE_URL}/health`);
      console.log('‚úÖ Servidor funcionando correctamente');
    } catch (error) {
      console.log('‚ùå Servidor no est√° funcionando. Ejecuta: npm run start:dev');
      return;
    }

    // 2. Verificar autenticaci√≥n
    console.log('\n2Ô∏è‚É£ Verificando autenticaci√≥n...');
    try {
      const authTest = await api.get('/users/profile');
      console.log('‚úÖ Autenticaci√≥n correcta');
      console.log('üë§ Usuario:', authTest.data.email);
      console.log('üè¢ Empresa ID:', authTest.data.empresaId);
    } catch (error) {
      console.log('‚ùå Error de autenticaci√≥n. Verifica tu JWT_TOKEN');
      console.log('üí° Ejecuta: export JWT_TOKEN="tu-token-aqui"');
      return;
    }

    // 3. Obtener ubicaciones disponibles
    console.log('\n3Ô∏è‚É£ Obteniendo ubicaciones disponibles...');
    try {
      const ubicaciones = await api.get('/ubicaciones');
      console.log('‚úÖ Ubicaciones obtenidas:', ubicaciones.data.length, 'ubicaciones');
      if (ubicaciones.data.length === 0) {
        console.log('‚ö†Ô∏è No hay ubicaciones. Necesitas crear al menos una ubicaci√≥n primero.');
        console.log('üí° Usa el endpoint: POST /ubicaciones');
        console.log('üí° O ejecuta: node scripts/setup-initial-data.js');
        return;
      }
      const primeraUbicacion = ubicaciones.data[0];
      console.log('üìç Primera ubicaci√≥n:', primeraUbicacion.nombre, '(ID:', primeraUbicacion.id, ')');
    } catch (error) {
      console.log('‚ùå Error obteniendo ubicaciones:', error.response?.data?.message || error.message);
      return;
    }

    // 4. Obtener configuraciones disponibles
    console.log('\n4Ô∏è‚É£ Obteniendo configuraciones de sensores...');
    try {
      const configs = await api.get('/mqtt-sensor/configuraciones');
      console.log('‚úÖ Configuraciones obtenidas');
      console.log('üìã Tipos disponibles:', configs.data.tipos_sensores);
    } catch (error) {
      console.log('‚ùå Error obteniendo configuraciones:', error.response?.data?.message || error.message);
      return;
    }

    // 5. Probar registro de sensor simple
    console.log('\n5Ô∏è‚É£ Probando registro de sensor simple...');
    try {
      const ubicaciones = await api.get('/ubicaciones');
      const primeraUbicacion = ubicaciones.data[0];

      const sensorSimple = await api.post('/mqtt-sensor/sensores/registrar-simple', {
        nombre: 'Sensor de Prueba',
        tipo: 'TEMPERATURA',
        ubicacionId: primeraUbicacion.id,
        descripcion: 'Sensor de prueba para verificar funcionalidad'
      });

      console.log('‚úÖ Sensor simple creado exitosamente');
      console.log('üîß Sensor ID:', sensorSimple.data.sensor.id);
      console.log('üìù Nombre:', sensorSimple.data.sensor.nombre);
      console.log('‚öôÔ∏è Configuraci√≥n aplicada:', sensorSimple.data.configuracion_aplicada.unidad);

      const sensorId = sensorSimple.data.sensor.id;

      // 6. Verificar que el sensor se cre√≥ correctamente
      console.log('\n6Ô∏è‚É£ Verificando sensor creado...');
      const sensorVerificado = await api.get(`/mqtt-sensor/sensores/sensor/${sensorId}`);
      console.log('‚úÖ Sensor verificado correctamente');
      console.log('üìä Estado:', sensorVerificado.data.activo ? 'Activo' : 'Inactivo');

      // 7. Listar todos los sensores
      console.log('\n7Ô∏è‚É£ Listando todos los sensores...');
      const sensores = await api.get('/mqtt-sensor/sensores/listar');
      console.log('‚úÖ Sensores listados:', sensores.data.length, 'sensores');
      sensores.data.forEach(sensor => {
        console.log(`   - ${sensor.nombre} (${sensor.tipo}) - ${sensor.ubicacion.nombre}`);
      });

      // 8. Probar registro de lectura
      console.log('\n8Ô∏è‚É£ Probando registro de lectura...');
      const lectura = await api.post('/mqtt-sensor/lecturas/registrar', {
        tipo: 'TEMPERATURA',
        valor: 25.5,
        unidad: '¬∞C',
        sensorId: sensorId,
        ubicacionId: primeraUbicacion.id
      });
      console.log('‚úÖ Lectura registrada exitosamente');
      console.log('üìà Valor:', lectura.data.valor, lectura.data.unidad);

      // 9. Probar registro m√∫ltiple
      console.log('\n9Ô∏è‚É£ Probando registro m√∫ltiple...');
      const sensoresMultiple = await api.post('/mqtt-sensor/sensores/registrar-multiple', {
        ubicacionId: primeraUbicacion.id,
        sensores: [
          {
            nombre: 'Sensor Humedad 1',
            tipo: 'HUMEDAD',
            descripcion: 'Sensor de humedad ambiental'
          },
          {
            nombre: 'Sensor Peso 1',
            tipo: 'PESO',
            descripcion: 'Sensor de peso para b√°scula'
          }
        ]
      });
      console.log('‚úÖ Registro m√∫ltiple completado');
      console.log('üìä Resumen:', sensoresMultiple.data.resumen);

      // 10. Probar analytics
      console.log('\nüîü Probando analytics...');
      const analytics = await api.get('/mqtt-sensor/analytics');
      console.log('‚úÖ Analytics obtenidos');
      console.log('üìä Total lecturas:', analytics.data.totalLecturas);
      console.log('üìà Lecturas √∫ltimas 24h:', analytics.data.lecturasUltimas24h);

      // 11. Probar dashboard
      console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Probando dashboard...');
      const dashboard = await api.get('/mqtt-sensor/dashboard/ubicaciones');
      console.log('‚úÖ Dashboard obtenido');
      console.log('üè¢ Ubicaciones en dashboard:', dashboard.data.ubicaciones.length);

      console.log('\nüéâ ¬°TODAS LAS PRUEBAS EXITOSAS!');
      console.log('\nüìã RESUMEN DE FUNCIONALIDADES VERIFICADAS:');
      console.log('   ‚úÖ Servidor funcionando');
      console.log('   ‚úÖ Autenticaci√≥n correcta');
      console.log('   ‚úÖ Ubicaciones disponibles');
      console.log('   ‚úÖ Configuraciones de sensores');
      console.log('   ‚úÖ Registro de sensor simple');
      console.log('   ‚úÖ Verificaci√≥n de sensor');
      console.log('   ‚úÖ Listado de sensores');
      console.log('   ‚úÖ Registro de lecturas');
      console.log('   ‚úÖ Registro m√∫ltiple');
      console.log('   ‚úÖ Analytics');
      console.log('   ‚úÖ Dashboard');
      
      console.log('\nüöÄ ¬°El sistema est√° listo para usar desde el frontend!');
      console.log('\nüìù PR√ìXIMOS PASOS PARA EL FRONTEND:');
      console.log('   1. Implementar formulario de registro simple');
      console.log('   2. Implementar listado de sensores');
      console.log('   3. Implementar dashboard en tiempo real');
      console.log('   4. Implementar WebSockets para actualizaciones');

    } catch (error) {
      console.log('‚ùå Error en las pruebas:', error.response?.data || error.message);
    }

  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

// Funci√≥n para mostrar configuraci√≥n necesaria
function mostrarConfiguracion() {
  console.log('üîß CONFIGURACI√ìN NECESARIA\n');

  console.log('1Ô∏è‚É£ Variables de entorno (.env):');
  console.log(`
# Configuraci√≥n MQTT para EMQX Broker
MQTT_ENABLED=true
MQTT_HOST=h02f10fd.ala.us-east-1.emqxsl.com
MQTT_PORT=8883
MQTT_USE_TLS=true
MQTT_USERNAME=tu_usuario
MQTT_PASSWORD=tu_contrase√±a
MQTT_APP_ID=v2c96220
MQTT_APP_SECRET=tu_app_secret
MQTT_API_ENDPOINT=https://h02f10fd.ala.us-east-1.emqxsl.com:8443/api/v5
  `);

  console.log('2Ô∏è‚É£ JWT Token para pruebas:');
  console.log(`
export JWT_TOKEN="tu-jwt-token-aqui"
  `);

  console.log('3Ô∏è‚É£ Comandos para ejecutar:');
  console.log(`
# Iniciar servidor
npm run start:dev

# Ejecutar pruebas
node scripts/test-complete-sensor-setup.js
  `);

  console.log('4Ô∏è‚É£ Endpoints principales para frontend:');
  console.log(`
# Configuraci√≥n
GET /mqtt-sensor/configuraciones

# Registro de sensores
POST /mqtt-sensor/sensores/registrar-simple
POST /mqtt-sensor/sensores/registrar-rapido
POST /mqtt-sensor/sensores/registrar-multiple

# Gesti√≥n de sensores
GET /mqtt-sensor/sensores/listar
GET /mqtt-sensor/sensores/sensor/:id
PATCH /mqtt-sensor/sensores/sensor/:id
DELETE /mqtt-sensor/sensores/sensor/:id

# Lecturas
POST /mqtt-sensor/lecturas/registrar
GET /mqtt-sensor/lecturas/listar

# Dashboard y Analytics
GET /mqtt-sensor/analytics
GET /mqtt-sensor/dashboard/ubicaciones
  `);
}

// Ejecutar pruebas
if (require.main === module) {
  if (process.argv.includes('--config')) {
    mostrarConfiguracion();
  } else {
    testCompleteSensorSetup();
  }
}

module.exports = { testCompleteSensorSetup, mostrarConfiguracion }; 