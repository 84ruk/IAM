const XLSX = require('xlsx');
const path = require('path');

function generarPlantillaMovimientos() {
  console.log('üìã Generando plantilla de movimientos...\n');

  // Datos de ejemplo para la plantilla
  const datosEjemplo = [
    ['producto', 'tipo', 'cantidad', 'descripcion', 'fecha', 'motivo'],
    ['Laptop HP Pavilion', 'ENTRADA', 10, 'Compra de inventario inicial', '2024-01-15', 'Compra proveedor'],
    ['Mouse Logitech MX Master', 'SALIDA', 5, 'Venta a cliente corporativo', '15/01/2024', 'Venta directa'],
    ['Teclado Mec√°nico RGB', 'ENTRADA', 20, 'Devoluci√≥n de cliente', '15-01-2024', 'Devoluci√≥n'],
    ['Monitor Dell 24"', 'SALIDA', 3, 'Transferencia a sucursal norte', '01/15/2024', 'Transferencia interna'],
    ['Producto Nuevo Autom√°tico', 'ENTRADA', 50, 'Producto creado autom√°ticamente', '2024-01-15', 'Importaci√≥n masiva'],
    ['Auriculares Sony WH-1000XM4', 'ENTRADA', 15, 'Stock de seguridad', '2024-01-16', 'Reposici√≥n'],
    ['Cable HDMI 2.1', 'SALIDA', 8, 'Venta online', '16/01/2024', 'E-commerce'],
    ['Disco Duro SSD 1TB', 'ENTRADA', 25, 'Compra mayorista', '16-01-2024', 'Compra mayorista'],
    ['Webcam Logitech C920', 'SALIDA', 12, 'Venta a empresa', '01/16/2024', 'Venta B2B'],
    ['Memoria RAM 16GB DDR4', 'ENTRADA', 30, 'Importaci√≥n directa', '2024-01-17', 'Importaci√≥n'],
  ];

  // Crear workbook
  const workbook = XLSX.utils.book_new();
  
  // Crear worksheet con datos de ejemplo
  const worksheet = XLSX.utils.aoa_to_sheet(datosEjemplo);
  
  // Configurar anchos de columna
  const columnWidths = [
    { wch: 25 }, // producto
    { wch: 10 }, // tipo
    { wch: 10 }, // cantidad
    { wch: 35 }, // descripcion
    { wch: 15 }, // fecha
    { wch: 20 }, // motivo
  ];
  worksheet['!cols'] = columnWidths;

  // Agregar estilos a la primera fila (headers)
  for (let col = 0; col < datosEjemplo[0].length; col++) {
    const cellRef = XLSX.utils.encode_cell({ r: 0, c: col });
    if (!worksheet[cellRef]) {
      worksheet[cellRef] = { v: datosEjemplo[0][col] };
    }
    worksheet[cellRef].s = {
      font: { bold: true, color: { rgb: 'FFFFFF' } },
      fill: { fgColor: { rgb: '4472C4' } },
      alignment: { horizontal: 'center', vertical: 'center' }
    };
  }

  // Agregar estilos a las filas de ejemplo
  for (let row = 1; row < datosEjemplo.length; row++) {
    for (let col = 0; col < datosEjemplo[row].length; col++) {
      const cellRef = XLSX.utils.encode_cell({ r: row, c: col });
      if (!worksheet[cellRef]) {
        worksheet[cellRef] = { v: datosEjemplo[row][col] };
      }
      
      // Estilo alternado para filas
      const isEvenRow = row % 2 === 0;
      worksheet[cellRef].s = {
        fill: { fgColor: { rgb: isEvenRow ? 'F2F2F2' : 'FFFFFF' } },
        alignment: { vertical: 'center' }
      };
    }
  }

  // Agregar worksheet al workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Movimientos');

  // Crear worksheet de instrucciones
  const instrucciones = [
    ['INSTRUCCIONES PARA IMPORTACI√ìN DE MOVIMIENTOS'],
    [''],
    ['CAMPOS REQUERIDOS:'],
    ['‚Ä¢ producto: Nombre del producto o ID (si no existe, se crea autom√°ticamente)'],
    ['‚Ä¢ tipo: ENTRADA o SALIDA'],
    ['‚Ä¢ cantidad: N√∫mero entero positivo'],
    [''],
    ['CAMPOS OPCIONALES:'],
    ['‚Ä¢ descripcion: Descripci√≥n del movimiento'],
    ['‚Ä¢ fecha: Fecha del movimiento (m√∫ltiples formatos soportados)'],
    ['‚Ä¢ motivo: Motivo del movimiento'],
    [''],
    ['FORMATOS DE FECHA SOPORTADOS:'],
    ['‚Ä¢ YYYY-MM-DD (ejemplo: 2024-01-15)'],
    ['‚Ä¢ DD/MM/YYYY (ejemplo: 15/01/2024)'],
    ['‚Ä¢ DD-MM-YYYY (ejemplo: 15-01-2024)'],
    ['‚Ä¢ MM/DD/YYYY (ejemplo: 01/15/2024)'],
    ['‚Ä¢ ISO (ejemplo: 2024-01-15T10:30:00Z)'],
    [''],
    ['NOTAS IMPORTANTES:'],
    ['1. Si el producto no existe, se crea autom√°ticamente con stock inicial 0'],
    ['2. El stock se actualiza autom√°ticamente seg√∫n el tipo de movimiento'],
    ['3. Los movimientos de SALIDA verifican que haya stock suficiente'],
    ['4. Las fechas futuras no est√°n permitidas'],
    ['5. Las cantidades deben ser n√∫meros enteros positivos'],
    ['6. Los productos creados autom√°ticamente tienen etiquetas especiales'],
    [''],
    ['EJEMPLOS DE TIPOS DE MOVIMIENTO:'],
    ['‚Ä¢ ENTRADA: Compra, devoluci√≥n, transferencia entrante, ajuste positivo'],
    ['‚Ä¢ SALIDA: Venta, transferencia saliente, p√©rdida, ajuste negativo'],
    [''],
    ['VALIDACIONES AUTOM√ÅTICAS:'],
    ['‚Ä¢ Verificaci√≥n de stock suficiente para salidas'],
    ['‚Ä¢ Validaci√≥n de fechas (no futuras)'],
    ['‚Ä¢ Normalizaci√≥n de tipos de movimiento'],
    ['‚Ä¢ Creaci√≥n autom√°tica de productos inexistentes'],
    ['‚Ä¢ Actualizaci√≥n autom√°tica de stock'],
  ];

  const worksheetInstrucciones = XLSX.utils.aoa_to_sheet(instrucciones);
  worksheetInstrucciones['!cols'] = [{ wch: 80 }]; // Ancho de columna para instrucciones
  
  // Estilo para el t√≠tulo
  const tituloRef = XLSX.utils.encode_cell({ r: 0, c: 0 });
  worksheetInstrucciones[tituloRef].s = {
    font: { bold: true, size: 14, color: { rgb: '4472C4' } },
    alignment: { horizontal: 'center' }
  };

  XLSX.utils.book_append_sheet(workbook, worksheetInstrucciones, 'Instrucciones');

  // Guardar archivo
  const filePath = path.join(__dirname, 'plantilla-movimientos-completa.xlsx');
  XLSX.writeFile(workbook, filePath);

  console.log('‚úÖ Plantilla generada exitosamente:');
  console.log(`   üìÅ Archivo: ${filePath}`);
  console.log('\nüìã Contenido de la plantilla:');
  console.log('   ‚Ä¢ Hoja "Movimientos": Datos de ejemplo con diferentes formatos');
  console.log('   ‚Ä¢ Hoja "Instrucciones": Gu√≠a completa de uso');
  console.log('\nüéØ Caracter√≠sticas de la plantilla:');
  console.log('   ‚Ä¢ Formato profesional con estilos');
  console.log('   ‚Ä¢ Ejemplos de todos los formatos de fecha soportados');
  console.log('   ‚Ä¢ Instrucciones detalladas de uso');
  console.log('   ‚Ä¢ Validaciones autom√°ticas explicadas');
  console.log('   ‚Ä¢ Casos de uso reales');
}

// Ejecutar la generaci√≥n
generarPlantillaMovimientos(); 