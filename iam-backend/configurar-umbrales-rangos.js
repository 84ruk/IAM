const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function configurarUmbralesRangos() {
  try {
    console.log('üîß Configurando umbrales con rangos para activar alertas autom√°ticamente...');
    
    // 1. Verificar sensores activos
    console.log('\nüì° VERIFICANDO SENSORES ACTIVOS:');
    const sensores = await prisma.sensor.findMany({
      where: { activo: true },
      include: {
        configuracionAlerta: true
      }
    });
    
    console.log(`üìä Sensores encontrados: ${sensores.length}`);
    sensores.forEach((sensor, index) => {
      console.log(`   ${index + 1}. ${sensor.nombre} (${sensor.tipo})`);
      console.log(`      üÜî ID: ${sensor.id}`);
      console.log(`      üìç Ubicaci√≥n: ${sensor.ubicacionId}`);
    });
    
    // 2. Configurar umbrales con rangos para cada sensor
    console.log('\n‚öôÔ∏è CONFIGURANDO UMBRALES CON RANGOS:');
    
    for (const sensor of sensores) {
      console.log(`\nüîß Configurando sensor: ${sensor.nombre} (${sensor.tipo})`);
      
      let umbralesConfig;
      
      // Configuraci√≥n espec√≠fica por tipo de sensor
      switch (sensor.tipo) {
        case 'TEMPERATURA':
          umbralesConfig = {
            tipo: 'TEMPERATURA',
            unidad: '¬∞C',
            precision: 0.1,
            rango_min: 15,        // Temperatura m√≠nima aceptable
            rango_max: 25,        // Temperatura m√°xima aceptable
            umbral_alerta_bajo: 18,   // Alerta si baja de 18¬∞C
            umbral_alerta_alto: 22,   // Alerta si sube de 22¬∞C
            umbral_critico_bajo: 15,  // Cr√≠tico si baja de 15¬∞C
            umbral_critico_alto: 25,  // Cr√≠tico si sube de 25¬∞C
            severidad: 'MEDIA',
            intervalo_lectura: 10000,
            alertasActivas: true
          };
          break;
          
        case 'HUMEDAD':
          umbralesConfig = {
            tipo: 'HUMEDAD',
            unidad: '%',
            precision: 0.1,
            rango_min: 30,        // Humedad m√≠nima aceptable
            rango_max: 80,        // Humedad m√°xima aceptable
            umbral_alerta_bajo: 35,   // Alerta si baja de 35%
            umbral_alerta_alto: 75,   // Alerta si sube de 75%
            umbral_critico_bajo: 30,  // Cr√≠tico si baja de 30%
            umbral_critico_alto: 80,  // Cr√≠tico si sube de 80%
            severidad: 'MEDIA',
            intervalo_lectura: 30000,
            alertasActivas: true
          };
          break;
          
        case 'PESO':
          umbralesConfig = {
            tipo: 'PESO',
            unidad: 'kg',
            precision: 0.1,
            rango_min: 100,       // Peso m√≠nimo aceptable
            rango_max: 900,       // Peso m√°ximo aceptable
            umbral_alerta_bajo: 150,  // Alerta si baja de 150kg
            umbral_alerta_alto: 850,  // Alerta si sube de 850kg
            umbral_critico_bajo: 100, // Cr√≠tico si baja de 100kg
            umbral_critico_alto: 900, // Cr√≠tico si sube de 900kg
            severidad: 'MEDIA',
            intervalo_lectura: 60000,
            alertasActivas: true
          };
          break;
          
        default:
          umbralesConfig = {
            tipo: sensor.tipo,
            unidad: 'unidad',
            precision: 0.1,
            rango_min: 0,
            rango_max: 100,
            umbral_alerta_bajo: 10,
            umbral_alerta_alto: 90,
            umbral_critico_bajo: 0,
            umbral_critico_alto: 100,
            severidad: 'MEDIA',
            intervalo_lectura: 30000,
            alertasActivas: true
          };
      }
      
      console.log(`   üìä Umbrales configurados:`);
      console.log(`      üìè Rango aceptable: ${umbralesConfig.rango_min} - ${umbralesConfig.rango_max} ${umbralesConfig.unidad}`);
      console.log(`      ‚ö†Ô∏è Alerta baja: < ${umbralesConfig.umbral_alerta_bajo} ${umbralesConfig.unidad}`);
      console.log(`      ‚ö†Ô∏è Alerta alta: > ${umbralesConfig.umbral_alerta_alto} ${umbralesConfig.unidad}`);
      console.log(`      üö® Cr√≠tico bajo: < ${umbralesConfig.umbral_critico_bajo} ${umbralesConfig.unidad}`);
      console.log(`      üö® Cr√≠tico alto: > ${umbralesConfig.umbral_critico_alto} ${umbralesConfig.unidad}`);
      
      // 3. Actualizar configuraci√≥n de alertas
      if (sensor.configuracionAlerta) {
        await prisma.configuracionAlerta.update({
          where: { id: sensor.configuracionAlerta.id },
          data: {
            umbralCritico: umbralesConfig,
            configuracionNotificacion: {
              email: true,
              sms: true,
              webSocket: true
            }
          }
        });
        
        console.log(`   ‚úÖ Configuraci√≥n actualizada en BD`);
      } else {
        // Crear nueva configuraci√≥n si no existe
        const nuevaConfig = await prisma.configuracionAlerta.create({
          data: {
            empresaId: sensor.empresaId,
            sensorId: sensor.id,
            tipoAlerta: sensor.tipo,
            activo: true,
            frecuencia: 'IMMEDIATE',
            ventanaEsperaMinutos: 5,
            umbralCritico: umbralesConfig,
            configuracionNotificacion: {
              email: true,
              sms: true,
              webSocket: true
            }
          }
        });
        
        console.log(`   ‚úÖ Nueva configuraci√≥n creada: ${nuevaConfig.id}`);
      }
    }
    
    // 4. Verificar configuraci√≥n final
    console.log('\nüîç VERIFICACI√ìN FINAL DE CONFIGURACI√ìN:');
    const configuracionesFinales = await prisma.configuracionAlerta.findMany({
      where: { activo: true },
      include: {
        sensor: {
          select: { nombre: true, tipo: true }
        }
      }
    });
    
    configuracionesFinales.forEach((config, index) => {
      const umbrales = config.umbralCritico || {};
      console.log(`\n   ${index + 1}. ${config.sensor.nombre} (${config.sensor.tipo})`);
      console.log(`      üìä Rango: ${umbrales.rango_min || 'N/A'} - ${umbrales.rango_max || 'N/A'} ${umbrales.unidad || ''}`);
      console.log(`      ‚ö†Ô∏è Alertas: ${umbrales.umbral_alerta_bajo || 'N/A'} / ${umbrales.umbral_alerta_alto || 'N/A'}`);
      console.log(`      üö® Cr√≠ticos: ${umbrales.umbral_critico_bajo || 'N/A'} / ${umbrales.umbral_critico_alto || 'N/A'}`);
      console.log(`      üîî Activo: ${config.activo ? '‚úÖ' : '‚ùå'}`);
    });
    
    // 5. Crear alerta de prueba para verificar funcionamiento
    console.log('\nüß™ CREANDO ALERTA DE PRUEBA PARA VERIFICAR UMBRALES...');
    
    const primerSensor = sensores[0];
    if (primerSensor) {
      const umbrales = configuracionesFinales[0].umbralCritico;
      
      // Crear lectura que supere el umbral cr√≠tico alto
      const valorAlerta = (umbrales.umbral_critico_alto || 25) + 5; // 5 unidades por encima del cr√≠tico
      
      const lectura = await prisma.sensorLectura.create({
        data: {
          tipo: primerSensor.tipo,
          valor: valorAlerta,
          unidad: umbrales.unidad || '¬∞C',
          sensorId: primerSensor.id,
          ubicacionId: primerSensor.ubicacionId,
          empresaId: primerSensor.empresaId,
          fecha: new Date()
        }
      });
      
      console.log(`‚úÖ Lectura de prueba creada: ${lectura.id}`);
      console.log(`   üìä Valor: ${lectura.valor} ${lectura.unidad}`);
      console.log(`   üö® Supera umbral cr√≠tico: ${umbrales.umbral_critico_alto} ${umbrales.unidad}`);
      
      // Crear alerta correspondiente
      const alerta = await prisma.alertaHistorial.create({
        data: {
          empresaId: primerSensor.empresaId,
          tipo: 'SENSOR_ALERT',
          severidad: 'CRITICA',
          titulo: `ALERTA CR√çTICA - ${primerSensor.tipo}`,
          mensaje: `üö® ${primerSensor.tipo} CR√çTICO: ${lectura.valor} ${lectura.unidad} - Supera umbral de ${umbrales.umbral_critico_alto} ${umbrales.unidad}`,
          sensorId: primerSensor.id,
          valor: lectura.valor.toString(),
          ubicacionId: primerSensor.ubicacionId,
          estado: 'ENVIADA',
          emailEnviado: false,
          condicionActivacion: {
            tipo: primerSensor.tipo,
            valor: lectura.valor,
            umbral_critico: umbrales.umbral_critico_alto,
            rango_aceptable: `${umbrales.rango_min} - ${umbrales.rango_max}`,
            timestamp: new Date().toISOString()
          }
        }
      });
      
      console.log(`‚úÖ Alerta de prueba creada: ${alerta.id}`);
      console.log(`   üö® Mensaje: ${alerta.mensaje}`);
    }
    
    console.log('\nüéØ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE!');
    console.log('\nüìã RESUMEN DE LO CONFIGURADO:');
    console.log('   ‚úÖ Umbrales con rangos configurados');
    console.log('   ‚úÖ Alertas autom√°ticas habilitadas');
    console.log('   ‚úÖ Notificaciones SMS habilitadas');
    console.log('   ‚úÖ Sistema listo para activar alertas autom√°ticamente');
    
    console.log('\nüí° C√ìMO FUNCIONA AHORA:');
    console.log('   1. ESP32 env√≠a lectura ‚Üí Backend recibe');
    console.log('   2. SensorAlertManagerService eval√∫a contra umbrales');
    console.log('   3. Si supera rango ‚Üí Se genera alerta autom√°ticamente');
    console.log('   4. Se env√≠an notificaciones (Email + SMS + WebSocket)');
    
    console.log('\nüöÄ PR√ìXIMO PASO:');
    console.log('   Env√≠a una lectura desde el ESP32 que supere los umbrales configurados');
    console.log('   El sistema deber√≠a generar alertas autom√°ticamente');
    
  } catch (error) {
    console.error('‚ùå Error configurando umbrales:', error);
  } finally {
    await prisma.$disconnect();
  }
}

configurarUmbralesRangos();
