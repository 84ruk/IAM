const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function forzarActualizacionSMS() {
  try {
    console.log('üîß Forzando actualizaci√≥n de configuraci√≥n SMS...');
    
    // Primero verificar qu√© hay en la base de datos
    const configActual = await prisma.configuracionAlerta.findFirst({
      where: { sensorId: 1 }
    });
    
    console.log('üìã Configuraci√≥n actual:', JSON.stringify(configActual.configuracionNotificacion, null, 2));
    
    // Forzar actualizaci√≥n completa
    const resultado = await prisma.configuracionAlerta.update({
      where: { id: 5 }, // ID espec√≠fico que vimos en el debug
      data: {
        configuracionNotificacion: {
          sms: true,
          push: false,
          email: true,
          webSocket: true
        }
      }
    });
    
    console.log('‚úÖ Configuraci√≥n actualizada exitosamente');
    console.log('üìã Nueva configuraci√≥n:', JSON.stringify(resultado.configuracionNotificacion, null, 2));
    
    // Verificar que se guard√≥
    const configVerificada = await prisma.configuracionAlerta.findFirst({
      where: { sensorId: 1 }
    });
    
    console.log('üîç Verificaci√≥n final:', JSON.stringify(configVerificada.configuracionNotificacion, null, 2));
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

forzarActualizacionSMS();
