generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Empresa {
  id            Int           @id @default(autoincrement())
  nombre        String
  rfc           String?       @unique
  emailContacto String?
  direccion     String?
  fechaCreacion DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  TipoIndustria TipoIndustria @default(GENERICA)
  
  // ✅ Relaciones
  usuarios      Usuario[]
  productos     Producto[]
  movimientos   MovimientoInventario[]
  proveedores   Proveedor[]
  pedidos       PedidoInventario[]
  alertas       AlertHistory[]
}

model Usuario {
  id              Int      @id @default(autoincrement())
  empresaId       Int?
  nombre          String
  email           String   @unique
  password        String?
  rol             Rol
  activo          Boolean  @default(true)
  createdAt       DateTime @default(now())
  authProvider    String   @default("local")
  googleId        String?  @unique
  setupCompletado Boolean  @default(false)
  
  // ✅ Relaciones
  empresa         Empresa? @relation(fields: [empresaId], references: [id])
  refreshTokens   RefreshToken[]

  @@index([empresaId, rol])
  @@index([empresaId, activo])
  @@index([rol, activo])
  @@index([email])
  @@index([googleId])
  @@index([setupCompletado])
}

model Producto {
  id                Int            @id @default(autoincrement())
  nombre            String
  descripcion       String?
  stock             Int            @default(0)
  empresaId         Int
  creadoEn          DateTime       @default(now())
  proveedorId       Int?
  actualizadoEn     DateTime       @updatedAt
  codigoBarras      String?        @unique
  humedadOptima     Float?
  rfid              String?        @unique
  sku               String?        @unique
  temperaturaOptima Float?
  ubicacion         String?
  precioCompra      Float
  precioVenta       Float
  stockMinimo       Int            @default(10)
  color             String?
  talla             String?
  tipoProducto      TipoProducto   @default(GENERICO)
  unidad            UnidadMedida   @default(UNIDAD)
  estado            EstadoProducto @default(ACTIVO)
  etiquetas         String[]
  version           Int            @default(1)

  // ✅ Relaciones
  empresa           Empresa              @relation(fields: [empresaId], references: [id])
  proveedor         Proveedor?           @relation(fields: [proveedorId], references: [id])
  movimientos       MovimientoInventario[]
  sensores          SensorLectura[]
  pedidos           PedidoInventario[]
  alertas           AlertHistory[]

  @@index([empresaId, etiquetas])
  @@index([empresaId, estado])
  @@index([empresaId, stock])
  @@index([empresaId, tipoProducto])
  @@index([proveedorId])
  @@index([codigoBarras])
  @@index([sku])
  @@index([rfid])
  @@index([nombre])
}

model MovimientoInventario {
  id             Int                   @id @default(autoincrement())
  cantidad       Int
  productoId     Int
  fecha          DateTime              @default(now())
  motivo         String?
  tipo           TipoMovimiento
  createdAt      DateTime              @default(now())
  descripcion    String?
  empresaId      Int
  estado         EstadoMovimiento      @default(ACTIVO)
  precioTotal    Float?
  precioUnitario Float?
  tipoPrecio     TipoPrecioMovimiento?

  empresa        Empresa               @relation(fields: [empresaId], references: [id])
  producto       Producto              @relation(fields: [productoId], references: [id])

  @@index([empresaId, fecha(sort: Desc)])
  @@index([productoId, fecha(sort: Desc)])
  @@index([empresaId, estado])
  @@index([tipo, fecha(sort: Desc)])
  @@index([tipoPrecio, fecha(sort: Desc)])
}

model Proveedor {
  id        Int             @id @default(autoincrement())
  nombre    String
  email     String?
  telefono  String?
  empresaId Int
  estado    EstadoProveedor @default(ACTIVO)

  // ✅ Relaciones
  empresa    Empresa        @relation(fields: [empresaId], references: [id])
  productos  Producto[]
  pedidos    PedidoInventario[]

  @@unique([empresaId, nombre])
  @@unique([empresaId, email])
  @@index([empresaId, estado])
  @@index([empresaId, nombre])
  @@index([email])
}

model PedidoInventario {
  id          Int          @id @default(autoincrement())
  productoId  Int
  proveedorId Int
  cantidad    Int
  fechaPedido DateTime     @default(now())
  empresaId   Int
  estado      EstadoPedido @default(PENDIENTE)

  // ✅ Relaciones
  empresa     Empresa      @relation(fields: [empresaId], references: [id])
  producto    Producto     @relation(fields: [productoId], references: [id])
  proveedor   Proveedor    @relation(fields: [proveedorId], references: [id])

  @@index([empresaId, estado])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  jti       String   @unique
  createdAt DateTime @default(now())

  // ✅ Relaciones
  user      Usuario  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([token])
  @@index([jti])
  @@index([expiresAt])
  @@index([isRevoked])
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  userId    Int
  reason    String   @default("manual_revocation")
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([jti])
  @@index([expiresAt])
  @@index([reason])
}

model TwoFactorAuth {
  id                       Int       @id @default(autoincrement())
  userId                   Int       @unique
  secret                   String
  backupCodes              String[]
  isEnabled                Boolean   @default(false)
  setupCompleted           Boolean   @default(false)
  lastUsed                 DateTime?
  lastUsedBackupCode       DateTime?
  enabledAt                DateTime?
  disabledAt               DateTime?
  backupCodesRegeneratedAt DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@index([isEnabled])
  @@index([setupCompleted])
}

model SecurityEvent {
  id        Int      @id @default(autoincrement())
  type      String
  userId    Int?
  userEmail String?
  ipAddress String
  userAgent String
  details   String
  severity  String
  timestamp DateTime @default(now())

  @@index([type])
  @@index([userId])
  @@index([ipAddress])
  @@index([severity])
  @@index([timestamp])
}

model BlockedIP {
  id        Int      @id @default(autoincrement())
  ipAddress String
  reason    String
  blockedAt DateTime @default(now())
  expiresAt DateTime

  @@index([ipAddress])
  @@index([expiresAt])
}

model SensorLectura {
  id         Int        @id @default(autoincrement())
  tipo       SensorTipo
  valor      Float
  unidad     String
  productoId Int?
  fecha      DateTime   @default(now())

  // ✅ Relaciones
  producto   Producto?  @relation(fields: [productoId], references: [id])

  @@index([productoId, tipo])
  @@index([productoId, fecha])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  userEmail   String
  userName    String
  action      String
  resource    String
  resourceId  Int?
  details     String
  ipAddress   String
  userAgent   String
  createdAt   DateTime @default(now())
  empresaId   Int?
  empresaName String?

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([empresaId])
}

model AlertHistory {
  id                  Int       @id @default(autoincrement())
  empresaId           Int
  tipo                String
  severidad           String
  titulo              String
  mensaje             String
  productoId          Int?
  productoNombre      String?
  destinatarios       String[]
  estado              String    @default("ENVIADA")
  fechaEnvio          DateTime  @default(now())
  fechaLectura        DateTime?
  fechaResolucion     DateTime?
  condicionActivacion Json?
  emailEnviado        Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // ✅ Relaciones
  empresa             Empresa   @relation(fields: [empresaId], references: [id])
  producto            Producto? @relation(fields: [productoId], references: [id])

  @@index([empresaId])
  @@index([tipo])
  @@index([estado])
  @@index([fechaEnvio(sort: Desc)])
}

model AlertConfiguration {
  id                   Int      @id @default(autoincrement())
  empresaId            Int
  tipoAlerta           String
  activo               Boolean  @default(true)
  destinatarios        String[]
  frecuencia           String
  ventanaEsperaMinutos Int?
  umbralCritico        Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([empresaId])
  @@index([tipoAlerta])
}

model NotificationTemplate {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  tipo           String
  asunto         String
  contenidoHtml  String
  contenidoTexto String?
  variables      Json?
  activo         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([name])
  @@index([tipo])
}

enum TipoIndustria {
  GENERICA
  ROPA
  ALIMENTOS
  ELECTRONICA
  FARMACIA
}

enum Rol {
  ADMIN
  EMPLEADO
  PROVEEDOR
  SUPERADMIN
}

enum TipoProducto {
  GENERICO
  ROPA
  ALIMENTO
  ELECTRONICO
  MEDICAMENTO
  SUPLEMENTO
  EQUIPO_MEDICO
  CUIDADO_PERSONAL
  BIOLOGICO
  MATERIAL_QUIRURGICO
  SOFTWARE
  HARDWARE
}

enum UnidadMedida {
  UNIDAD
  KILO
  LITRO
  CAJA
  PAQUETE
  KILOGRAMO
  LITROS
  METRO
  METROS
  GRAMO
  GRAMOS
  MILILITRO
  MILILITROS
  CENTIMETRO
  CENTIMETROS
  LICENCIA
}

enum EstadoProducto {
  ACTIVO
  INACTIVO
  ELIMINADO
}

enum EstadoProveedor {
  ACTIVO
  INACTIVO
  ELIMINADO
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
}

enum EstadoMovimiento {
  ACTIVO
  ELIMINADO
}

enum EstadoPedido {
  PENDIENTE
  ENVIADO
  RECIBIDO
  CANCELADO
}

enum TipoPrecioMovimiento {
  COMPRA
  VENTA
  AJUSTE
  TRANSFERENCIA
}

enum SensorTipo {
  TEMPERATURA
  HUMEDAD
  PRESION
  PESO
}
