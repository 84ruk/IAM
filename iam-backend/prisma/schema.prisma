generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Empresa {
  id            Int                    @id @default(autoincrement())
  nombre        String
  rfc           String?                @unique
  emailContacto String?
  direccion     String?
  fechaCreacion DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  TipoIndustria TipoIndustria          @default(GENERICA)
  movimientos   MovimientoInventario[]
  pedidos       PedidoInventario[]
  productos     Producto[]
  proveedores   Proveedor[]
  usuarios      Usuario[]
  auditLogs     AuditLog[]
}

model Usuario {
  id              Int           @id @default(autoincrement())
  empresaId       Int?
  nombre          String
  email           String        @unique
  password        String?
  rol             Rol
  activo          Boolean       @default(true)
  createdAt       DateTime      @default(now())
  authProvider    String        @default("local")
  googleId        String?       @unique
  setupCompletado Boolean       @default(false)
  empresa         Empresa?      @relation(fields: [empresaId], references: [id])
  auditLogs       AuditLog[]
  refreshTokens   RefreshToken[]
  blacklistedTokens BlacklistedToken[]
  twoFactorAuth   TwoFactorAuth?
  securityEvents  SecurityEvent[]

  @@index([empresaId, rol])
  @@index([empresaId, activo])
  @@index([rol, activo])
  @@index([email])
  @@index([googleId])
  @@index([setupCompletado])
}

model Producto {
  id                Int                    @id @default(autoincrement())
  nombre            String
  descripcion       String?
  stock             Int                    @default(0)
  empresaId         Int
  creadoEn          DateTime               @default(now())
  proveedorId       Int?
  actualizadoEn     DateTime               @updatedAt
  codigoBarras      String?                @unique
  humedadOptima     Float?
  rfid              String?                @unique
  sku               String?                @unique
  temperaturaOptima Float?
  ubicacion         String?
  precioCompra      Float
  precioVenta       Float
  stockMinimo       Int                    @default(10)
  color             String?
  talla             String?
  tipoProducto      TipoProducto           @default(GENERICO)
  unidad            UnidadMedida           @default(UNIDAD)
  estado            EstadoProducto         @default(ACTIVO)
  etiquetas         String[]
  version           Int                    @default(1) // Campo para versionado optimista
  movimientos       MovimientoInventario[]
  pedidos           PedidoInventario[]
  empresa           Empresa                @relation(fields: [empresaId], references: [id])
  proveedor         Proveedor?             @relation(fields: [proveedorId], references: [id])
  sensores          SensorLectura[]

  @@index([empresaId, etiquetas])
  @@index([empresaId, estado])
  @@index([empresaId, stock(sort: Asc)])
  @@index([empresaId, tipoProducto])
  @@index([proveedorId])
  @@index([codigoBarras])
  @@index([sku])
  @@index([rfid])
  @@index([nombre(sort: Asc)])
}

model MovimientoInventario {
  id          Int              @id @default(autoincrement())
  cantidad    Int
  productoId  Int
  fecha       DateTime         @default(now())
  motivo      String?
  tipo        TipoMovimiento
  createdAt   DateTime         @default(now())
  descripcion String?
  empresaId   Int
  estado      EstadoMovimiento @default(ACTIVO)
  empresa     Empresa          @relation(fields: [empresaId], references: [id])
  producto    Producto         @relation(fields: [productoId], references: [id])

  @@index([empresaId, fecha(sort: Desc)])
  @@index([productoId, fecha(sort: Desc)])
  @@index([empresaId, estado])
  @@index([tipo, fecha(sort: Desc)])
}

model Proveedor {
  id        Int                @id @default(autoincrement())
  nombre    String
  email     String?
  telefono  String?
  empresaId Int
  estado    EstadoProveedor    @default(ACTIVO)
  pedidos   PedidoInventario[]
  productos Producto[]
  empresa   Empresa            @relation(fields: [empresaId], references: [id])

  @@unique([empresaId, nombre])
  @@unique([empresaId, email])
  @@index([empresaId, estado])
  @@index([empresaId, nombre(sort: Asc)])
  @@index([email])
}

model PedidoInventario {
  id          Int          @id @default(autoincrement())
  productoId  Int
  proveedorId Int
  cantidad    Int
  fechaPedido DateTime     @default(now())
  empresaId   Int
  estado      EstadoPedido @default(PENDIENTE)
  empresa     Empresa      @relation(fields: [empresaId], references: [id])
  producto    Producto     @relation(fields: [productoId], references: [id])
  proveedor   Proveedor    @relation(fields: [proveedorId], references: [id])

  @@index([empresaId, estado])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  jti       String   @unique // JWT ID Ãºnico
  createdAt DateTime @default(now())
  
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([jti])
  @@index([expiresAt])
  @@index([isRevoked])
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  userId    Int
  reason    String   @default("manual_revocation")
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jti])
  @@index([expiresAt])
  @@index([reason])
}

model TwoFactorAuth {
  id                      Int       @id @default(autoincrement())
  userId                  Int       @unique
  secret                  String
  backupCodes             String[]
  isEnabled               Boolean   @default(false)
  setupCompleted          Boolean   @default(false)
  lastUsed                DateTime?
  lastUsedBackupCode      DateTime?
  enabledAt               DateTime?
  disabledAt              DateTime?
  backupCodesRegeneratedAt DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  user                    Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isEnabled])
  @@index([setupCompleted])
}

model SecurityEvent {
  id         Int      @id @default(autoincrement())
  type       String
  userId     Int?
  userEmail  String?
  ipAddress  String
  userAgent  String
  details    String
  severity   String
  timestamp  DateTime @default(now())
  
  user       Usuario? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([type])
  @@index([userId])
  @@index([ipAddress])
  @@index([severity])
  @@index([timestamp])
}

model BlockedIP {
  id         Int      @id @default(autoincrement())
  ipAddress  String
  reason     String
  blockedAt  DateTime @default(now())
  expiresAt  DateTime

  @@index([ipAddress])
  @@index([expiresAt])
}

model SensorLectura {
  id         Int        @id @default(autoincrement())
  tipo       SensorTipo
  valor      Float
  unidad     String
  productoId Int?
  fecha      DateTime   @default(now())
  producto   Producto?  @relation(fields: [productoId], references: [id])

  @@index([productoId, tipo])
  @@index([productoId, fecha])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  userEmail  String
  userName   String
  action     String
  resource   String
  resourceId Int?
  details    String
  ipAddress  String
  userAgent  String
  createdAt  DateTime @default(now())
  empresaId  Int?
  empresaName String?

  user       Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  empresa    Empresa? @relation(fields: [empresaId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([empresaId])
}

enum TipoIndustria {
  GENERICA
  ROPA
  ALIMENTOS
  ELECTRONICA
  FARMACIA
}

enum Rol {
  ADMIN
  EMPLEADO
  PROVEEDOR
  SUPERADMIN
}

enum TipoProducto {
  GENERICO
  ROPA
  ALIMENTO
  ELECTRONICO
}

enum UnidadMedida {
  UNIDAD
  KILO
  LITRO
  CAJA
  PAQUETE
}

enum EstadoProducto {
  ACTIVO
  INACTIVO
  ELIMINADO
}

enum EstadoProveedor {
  ACTIVO
  INACTIVO
  ELIMINADO
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
}

enum EstadoMovimiento {
  ACTIVO
  ELIMINADO
}

enum EstadoPedido {
  PENDIENTE
  ENVIADO
  RECIBIDO
  CANCELADO
}

enum SensorTipo {
  TEMPERATURA
  HUMEDAD
  PRESION
  PESO
}
