generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id            Int      @id @default(autoincrement())
  nombre        String
  rfc           String?  @unique
  emailContacto String?
  direccion     String?
  fechaCreacion DateTime @default(now())
  updatedAt     DateTime @updatedAt

  usuarios    Usuario[]
  productos   Producto[]
  proveedores Proveedor[]
  pedidos     PedidoInventario[]
}

model Usuario {
  id        Int      @id @default(autoincrement())
  empresaId Int
  nombre    String
  email     String   @unique
  password  String
  rol       Rol
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())

  empresa Empresa @relation(fields: [empresaId], references: [id])
}

enum Rol {
  ADMIN
  EMPLEADO
  PROVEEDOR
}

model Producto {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float
  stock       Int      @default(0)
  unidad      String //Validar en servicio que nunca sea negativo 
  empresaId   Int
  proveedorId Int?


  creadoEn    DateTime @default(now())
  actualizadoEn DateTime  @updatedAt

  sensores  SensorLectura[]
  movimientos MovimientoInventario[]
  pedidos     PedidoInventario[]
  empresa     Empresa  @relation(fields: [empresaId], references: [id])
  proveedor   Proveedor?             @relation(fields: [proveedorId], references: [id])

  codigoBarras   String?   @unique  // para lectores de código de barras
  rfid           String?   @unique  // para sensores RFID
  ubicacion      String?            // para saber dónde está dentro del almacén
  temperaturaOptima Float?          // si requiere frío o cuidado especial
  humedadOptima    Float?           // si es sensible a humedad

  // integraciones ERP / IA
  sku            String? @unique
  categoria      String?            // para filtros y dashboards

  @@index([empresaId, categoria])
}

enum UnidadMedida {
  PIEZA
  KG
  LITRO
  CAJA
  OTRO
}

model MovimientoInventario {
  id         Int      @id @default(autoincrement())
  tipo       TipoMovimiento
  cantidad   Int
  
  productoId Int
  fecha      DateTime @default(now())
  motivo     String?

  producto   Producto @relation(fields: [productoId], references: [id])
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
}

model Proveedor {
  id        Int     @id @default(autoincrement())
  nombre    String
  email     String?
  telefono  String?
  empresaId Int


  empresa   Empresa @relation(fields: [empresaId], references: [id])
  productos Producto[]
  pedidos   PedidoInventario[]
}

model PedidoInventario {
  id          Int      @id @default(autoincrement())
  productoId  Int
  proveedorId Int
  cantidad    Int
  fechaPedido DateTime @default(now())
  estado      EstadoPedido   @default(PENDIENTE) // pendiente, enviado, recibido
  empresaId   Int

  producto  Producto  @relation(fields: [productoId], references: [id])
  proveedor Proveedor @relation(fields: [proveedorId], references: [id])
  empresa   Empresa   @relation(fields: [empresaId], references: [id])

  @@index([empresaId, estado])
}

enum EstadoPedido {
  PENDIENTE
  ENVIADO
  RECIBIDO 
}

model SensorLectura {
  id          Int      @id @default(autoincrement())
  tipo        SensorTipo
  valor       Float
  unidad      String
  productoId  Int?

  producto    Producto? @relation(fields: [productoId], references: [id])
  fecha       DateTime @default(now())

  @@index([productoId, tipo]) 
  @@index([productoId, fecha]) //Para grafica

}

enum SensorTipo {
  PESO
  TEMPERATURA
  HUMEDAD
  RFID
}
