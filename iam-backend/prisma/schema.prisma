generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Empresa {
  id                   Int                    @id @default(autoincrement())
  nombre               String
  rfc                  String?                @unique
  emailContacto        String?
  direccion            String?
  fechaCreacion        DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  TipoIndustria        TipoIndustria          @default(GENERICA)
  alertas              AlertaHistorial[]
  alertasConfiguracion ConfiguracionAlerta[]
  destinatarios        DestinatarioAlerta[]
  dispositivosIoT      DispositivoIoT[]
  movimientos          MovimientoInventario[]
  pedidos              PedidoInventario[]
  productos            Producto[]
  proveedores          Proveedor[]
  smsDeliveryLogs      SMSDeliveryLog[]
  sensores             Sensor[]
  lecturasSensores     SensorLectura[]
  ubicaciones          Ubicacion[]
  usuarios             Usuario[]
}

model Usuario {
  id              Int            @id @default(autoincrement())
  empresaId       Int?
  nombre          String
  email           String         @unique
  password        String?
  rol             Rol
  activo          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  authProvider    String         @default("local")
  googleId        String?        @unique
  setupCompletado Boolean        @default(false)
  telefono        String?
  empresa         Empresa?       @relation(fields: [empresaId], references: [id])
  refreshTokens   RefreshToken[]

  @@index([empresaId, rol])
  @@index([empresaId, activo])
  @@index([rol, activo])
  @@index([email])
  @@index([googleId])
  @@index([setupCompletado])
}

model Producto {
  id                Int                    @id @default(autoincrement())
  nombre            String
  descripcion       String?
  stock             Int                    @default(0)
  empresaId         Int
  creadoEn          DateTime               @default(now())
  proveedorId       Int?
  actualizadoEn     DateTime               @updatedAt
  codigoBarras      String?                @unique
  humedadOptima     Float?
  rfid              String?                @unique
  sku               String?                @unique
  temperaturaOptima Float?
  ubicacion         String?
  ubicacionId       Int?
  precioCompra      Float
  precioVenta       Float
  stockMinimo       Int                    @default(10)
  color             String?
  talla             String?
  tipoProducto      TipoProducto           @default(GENERICO)
  unidad            UnidadMedida           @default(UNIDAD)
  estado            EstadoProducto         @default(ACTIVO)
  etiquetas         String[]
  version           Int                    @default(1)
  alertas           AlertaHistorial[]
  movimientos       MovimientoInventario[] @relation("ProductoMovimientos")
  pedidos           PedidoInventario[]     @relation("ProductoPedidos")
  empresa           Empresa                @relation(fields: [empresaId], references: [id])
  proveedor         Proveedor?             @relation(fields: [proveedorId], references: [id])
  ubicacionRel      Ubicacion?             @relation(fields: [ubicacionId], references: [id])
  sensores          SensorLectura[]

  @@index([empresaId, etiquetas])
  @@index([empresaId, estado])
  @@index([empresaId, stock])
  @@index([empresaId, tipoProducto])
  @@index([proveedorId])
  @@index([ubicacionId])
  @@index([codigoBarras])
  @@index([sku])
  @@index([rfid])
  @@index([nombre])
}

model MovimientoInventario {
  id             Int                   @id @default(autoincrement())
  cantidad       Int
  productoId     Int
  proveedorId    Int?
  fecha          DateTime              @default(now())
  motivo         String?
  tipo           TipoMovimiento
  createdAt      DateTime              @default(now())
  descripcion    String?
  empresaId      Int
  estado         EstadoMovimiento      @default(ACTIVO)
  precioTotal    Float?
  precioUnitario Float?
  tipoPrecio     TipoPrecioMovimiento?
  empresa        Empresa               @relation(fields: [empresaId], references: [id])
  producto       Producto              @relation("ProductoMovimientos", fields: [productoId], references: [id], onDelete: Cascade)
  proveedor      Proveedor?            @relation(fields: [proveedorId], references: [id])

  @@index([empresaId, fecha(sort: Desc)])
  @@index([productoId, fecha(sort: Desc)])
  @@index([empresaId, estado])
  @@index([tipo, fecha(sort: Desc)])
  @@index([tipoPrecio, fecha(sort: Desc)])
  @@index([proveedorId])
}

model Proveedor {
  id          Int                    @id @default(autoincrement())
  nombre      String
  email       String?
  telefono    String?
  empresaId   Int
  estado      EstadoProveedor        @default(ACTIVO)
  movimientos MovimientoInventario[]
  pedidos     PedidoInventario[]
  productos   Producto[]
  empresa     Empresa                @relation(fields: [empresaId], references: [id])

  @@unique([empresaId, nombre])
  @@unique([empresaId, email])
  @@index([empresaId, estado])
  @@index([empresaId, nombre])
  @@index([email])
}

model PedidoInventario {
  id          Int          @id @default(autoincrement())
  productoId  Int
  proveedorId Int
  cantidad    Int
  fechaPedido DateTime     @default(now())
  empresaId   Int
  estado      EstadoPedido @default(PENDIENTE)
  empresa     Empresa      @relation(fields: [empresaId], references: [id])
  producto    Producto     @relation("ProductoPedidos", fields: [productoId], references: [id], onDelete: Cascade)
  proveedor   Proveedor    @relation(fields: [proveedorId], references: [id])

  @@index([empresaId, estado])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  jti       String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  user      Usuario  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@index([isRevoked])
  @@index([jti])
  @@index([token])
  @@map("refresh_tokens")
}

model ConfiguracionAlerta {
  id                        Int                               @id @default(autoincrement())
  empresaId                 Int
  sensorId                  Int                               @unique
  tipoAlerta                String
  activo                    Boolean                           @default(true)
  frecuencia                String
  ventanaEsperaMinutos      Int?
  umbralCritico             Json?
  configuracionNotificacion Json?
  createdAt                 DateTime                          @default(now())
  updatedAt                 DateTime                          @updatedAt
  empresa                   Empresa                           @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  sensor                    Sensor                            @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  destinatarios             ConfiguracionAlertaDestinatario[]

  @@index([empresaId])
  @@index([tipoAlerta])
}

model ConfiguracionAlertaDestinatario {
  id                    Int                 @id @default(autoincrement())
  configuracionAlertaId Int
  destinatarioId        Int
  configuracionAlerta   ConfiguracionAlerta @relation(fields: [configuracionAlertaId], references: [id])
  destinatario          DestinatarioAlerta  @relation(fields: [destinatarioId], references: [id])

  @@unique([configuracionAlertaId, destinatarioId])
  @@index([configuracionAlertaId])
  @@index([destinatarioId])
}

model DestinatarioAlerta {
  id                  Int                               @id @default(autoincrement())
  nombre              String
  email               String
  telefono            String?
  tipo                TipoDestinatarioAlerta
  activo              Boolean                           @default(true)
  empresaId           Int
  alertasConfiguradas ConfiguracionAlertaDestinatario[]
  empresa             Empresa                           @relation(fields: [empresaId], references: [id])

  @@unique([empresaId, email])
  @@index([empresaId])
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  jti       String   @unique
  userId    Int
  reason    String   @default("manual_revocation")
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([jti])
  @@index([expiresAt])
  @@index([reason])
}

model TwoFactorAuth {
  id                       Int       @id @default(autoincrement())
  userId                   Int       @unique
  secret                   String
  backupCodes              String[]
  isEnabled                Boolean   @default(false)
  setupCompleted           Boolean   @default(false)
  lastUsed                 DateTime?
  lastUsedBackupCode       DateTime?
  enabledAt                DateTime?
  disabledAt               DateTime?
  backupCodesRegeneratedAt DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@index([isEnabled])
  @@index([setupCompleted])
}

model SecurityEvent {
  id        Int      @id @default(autoincrement())
  type      String
  userId    Int?
  userEmail String?
  ipAddress String
  userAgent String
  details   String
  severity  String
  timestamp DateTime @default(now())

  @@index([type])
  @@index([userId])
  @@index([ipAddress])
  @@index([severity])
  @@index([timestamp])
}

model BlockedIP {
  id        Int      @id @default(autoincrement())
  ipAddress String
  reason    String
  blockedAt DateTime @default(now())
  expiresAt DateTime

  @@index([ipAddress])
  @@index([expiresAt])
}

model Ubicacion {
  id              Int               @id @default(autoincrement())
  nombre          String
  descripcion     String?
  empresaId       Int
  activa          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  alertas         AlertaHistorial[]
  dispositivosIoT DispositivoIoT[]
  kpiEventos      KpiEvento[]
  productos       Producto[]
  sensores        Sensor[]
  lecturas        SensorLectura[]
  empresa         Empresa           @relation(fields: [empresaId], references: [id])

  @@index([empresaId])
  @@index([empresaId, activa])
}

model Sensor {
  id                  Int                  @id @default(autoincrement())
  nombre              String
  tipo                SensorTipo
  descripcion         String?
  ubicacionId         Int
  empresaId           Int
  activo              Boolean              @default(true)
  configuracion       Json?
  dispositivoIoTId    Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  alertas             AlertaHistorial[]
  configuracionAlerta ConfiguracionAlerta?
  dispositivoIoT      DispositivoIoT?      @relation(fields: [dispositivoIoTId], references: [id])
  empresa             Empresa              @relation(fields: [empresaId], references: [id])
  ubicacion           Ubicacion            @relation(fields: [ubicacionId], references: [id])
  lecturas            SensorLectura[]

  @@unique([nombre, ubicacionId])
  @@index([ubicacionId])
  @@index([empresaId])
  @@index([tipo])
  @@index([dispositivoIoTId])
}

model SensorLectura {
  id          Int        @id @default(autoincrement())
  tipo        SensorTipo
  valor       Float
  unidad      String
  sensorId    Int?
  productoId  Int?
  ubicacionId Int?
  empresaId   Int
  fecha       DateTime   @default(now())
  empresa     Empresa    @relation(fields: [empresaId], references: [id])
  producto    Producto?  @relation(fields: [productoId], references: [id])
  sensor      Sensor?    @relation(fields: [sensorId], references: [id])
  ubicacion   Ubicacion? @relation(fields: [ubicacionId], references: [id])

  @@index([sensorId, fecha])
  @@index([ubicacionId, fecha])
  @@index([empresaId, fecha])
  @@index([tipo, fecha])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  userEmail   String
  userName    String
  action      String
  resource    String
  resourceId  Int?
  details     String
  ipAddress   String
  userAgent   String
  createdAt   DateTime @default(now())
  empresaId   Int?
  empresaName String?

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([empresaId])
}

model AlertaHistorial {
  id                  Int                @id @default(autoincrement())
  empresaId           Int
  tipo                String
  severidad           SeveridadAlerta
  titulo              String
  mensaje             String
  productoId          Int?
  productoNombre      String?
  sensorId            Int?
  valor               String?
  ubicacionId         Int?
  destinatarios       String[]
  estado              String             @default("ENVIADA")
  fechaEnvio          DateTime           @default(now())
  fechaLectura        DateTime?
  fechaResolucion     DateTime?
  condicionActivacion Json?
  emailEnviado        Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  empresa             Empresa            @relation(fields: [empresaId], references: [id])
  producto            Producto?          @relation(fields: [productoId], references: [id])
  sensor              Sensor?            @relation(fields: [sensorId], references: [id])
  ubicacion           Ubicacion?         @relation(fields: [ubicacionId], references: [id])
  registrosEnvioSMS   RegistroEnvioSMS[]
  smsDeliveryLogs     SMSDeliveryLog[]

  @@index([empresaId])
  @@index([tipo])
  @@index([estado])
  @@index([fechaEnvio(sort: Desc)])
}

model RegistroEnvioSMS {
  id           Int              @id @default(autoincrement())
  mensajeId    String
  destinatario String
  estado       String
  codigoError  String?
  alertaId     Int?
  alerta       AlertaHistorial? @relation(fields: [alertaId], references: [id])

  @@index([alertaId])
  @@index([estado])
}

model NotificationTemplate {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  tipo           String
  asunto         String
  contenidoHtml  String
  contenidoTexto String?
  variables      Json?
  activo         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([name])
  @@index([tipo])
}

model SMSDeliveryLog {
  id           Int              @id @default(autoincrement())
  messageId    String
  to           String
  status       String
  errorCode    String?
  errorMessage String?
  provider     String
  empresaId    Int
  alertaId     Int?
  timestamp    DateTime         @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  alerta       AlertaHistorial? @relation(fields: [alertaId], references: [id])
  empresa      Empresa          @relation(fields: [empresaId], references: [id])

  @@index([empresaId])
  @@index([messageId])
  @@index([status])
  @@index([timestamp])
}

model DispositivoIoT {
  id                   Int       @id @default(autoincrement())
  deviceId             String    @unique
  deviceName           String
  nombre               String
  tipo                 String    @default("ESP32")
  ubicacionId          Int
  empresaId            Int
  activo               Boolean   @default(true)
  configuracion        Json?
  wifiSSID             String?
  wifiPassword         String?
  apiBaseUrl           String?
  apiToken             String?
  apiEndpoint          String?
  sensoresConfigurados Json?
  intervaloLecturas    Int?      @default(30000)
  ultimaLectura        DateTime?
  ultimaActualizacion  DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  empresa              Empresa   @relation(fields: [empresaId], references: [id])
  ubicacion            Ubicacion @relation(fields: [ubicacionId], references: [id])
  sensores             Sensor[]

  @@index([deviceId])
  @@index([ubicacionId])
  @@index([empresaId])
  @@index([tipo])
  @@index([activo])
}

model KpiEvento {
  id          Int       @id @default(autoincrement())
  ubicacionId Int
  tipo        String
  evento      String
  timestamp   DateTime  @default(now())
  metadata    Json?
  ubicacion   Ubicacion @relation(fields: [ubicacionId], references: [id])

  @@index([ubicacionId])
  @@index([tipo])
  @@index([evento])
  @@index([timestamp])
}

enum TipoDestinatarioAlerta {
  EMAIL
  SMS
  AMBOS
}

enum SeveridadAlerta {
  BAJA
  MEDIA
  ALTA
  CRITICA
}

enum TipoIndustria {
  GENERICA
  ROPA
  ALIMENTOS
  ELECTRONICA
  FARMACIA
}

enum Rol {
  ADMIN
  EMPLEADO
  PROVEEDOR
  SUPERADMIN
}

enum TipoProducto {
  GENERICO
  ROPA
  ALIMENTO
  ELECTRONICO
  MEDICAMENTO
  SUPLEMENTO
  EQUIPO_MEDICO
  CUIDADO_PERSONAL
  BIOLOGICO
  MATERIAL_QUIRURGICO
  SOFTWARE
  HARDWARE
}

enum UnidadMedida {
  UNIDAD
  KILO
  LITRO
  CAJA
  PAQUETE
  KILOGRAMO
  LITROS
  METRO
  METROS
  GRAMO
  GRAMOS
  MILILITRO
  MILILITROS
  CENTIMETRO
  CENTIMETROS
  LICENCIA
}

enum EstadoProducto {
  ACTIVO
  INACTIVO
  ELIMINADO
}

enum EstadoProveedor {
  ACTIVO
  INACTIVO
  ELIMINADO
}

enum TipoMovimiento {
  ENTRADA
  SALIDA
}

enum EstadoMovimiento {
  ACTIVO
  ELIMINADO
}

enum EstadoPedido {
  PENDIENTE
  ENVIADO
  RECIBIDO
  CANCELADO
}

enum TipoPrecioMovimiento {
  COMPRA
  VENTA
  AJUSTE
  TRANSFERENCIA
}

enum SensorTipo {
  TEMPERATURA
  HUMEDAD
  PRESION
  PESO
}
