const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testEnvioDirecto() {
  try {
    console.log('üß™ Probando env√≠o DIRECTO de notificaciones...');
    
    // 1. Verificar que el backend est√© corriendo
    console.log('\nüîç Verificando estado del backend...');
    
    try {
      const response = await fetch('http://localhost:3001/health');
      if (response.ok) {
        console.log('  - ‚úÖ Backend corriendo en puerto 3001');
      } else {
        console.log('  - ‚ö†Ô∏è Backend respondiendo pero con error');
      }
    } catch (error) {
      console.log('  - ‚ùå Backend no responde en puerto 3001');
      console.log('  - üîß Aseg√∫rate de que est√© corriendo con: npm run start:dev');
      return;
    }
    
    // 2. Simular una lectura que genere alerta
    console.log('\nüìä Simulando lectura que genere alerta...');
    
    const lecturaSimulada = {
      sensorId: 1, // Temperatura (DHT22)
      tipo: 'TEMPERATURA',
      valor: 25.0, // Supera el umbral cr√≠tico de 22.5¬∞C
      unidad: '¬∞C',
      empresaId: 1,
      ubicacionId: 1,
      fecha: new Date()
    };
    
    console.log(`  - üìä Simulando lectura: ${lecturaSimulada.valor}${lecturaSimulada.unidad}`);
    console.log(`  - üö® Deber√≠a generar alerta CR√çTICA (umbral: 22.5¬∞C)`);
    
    // 3. Verificar configuraci√≥n actual
    console.log('\nüìã Verificando configuraci√≥n actual:');
    const configuracion = await prisma.configuracionAlerta.findFirst({
      where: { 
        sensorId: 1,
        empresaId: 1
      },
      include: {
        destinatarios: {
          include: {
            destinatario: {
              select: { nombre: true, email: true, telefono: true, tipo: true }
            }
          }
        }
      }
    });
    
    if (configuracion) {
      console.log(`  - ‚úÖ Configuraci√≥n encontrada para sensor ${configuracion.sensorId}`);
      console.log(`  - üìß Destinatarios: ${configuracion.destinatarios.length}`);
      
      configuracion.destinatarios.forEach(dest => {
        console.log(`    ‚Ä¢ ${dest.destinatario.nombre}: ${dest.destinatario.email || 'sin email'} | ${dest.destinatario.telefono || 'sin tel√©fono'}`);
      });
    } else {
      console.log('  - ‚ùå No se encontr√≥ configuraci√≥n de alertas');
      return;
    }
    
    // 4. Instrucciones para probar
    console.log('\nüöÄ INSTRUCCIONES PARA PROBAR:');
    console.log('  1. ‚úÖ Backend debe estar corriendo (verificado arriba)');
    console.log('  2. üì± Env√≠a una lectura desde el ESP32 con temperatura > 22.5¬∞C');
    console.log('  3. üìß Revisa tu email: notificaciones@iaminventario.com.mx y baruk066@gmail.com');
    console.log('  4. üì± Revisa tu SMS al n√∫mero: 4441882114');
    console.log('  5. üîç Verifica los logs del backend para confirmar env√≠o');
    
    // 5. Verificar logs recientes
    console.log('\nüìä Verificando alertas recientes...');
    const alertasRecientes = await prisma.alertaHistorial.findMany({
      where: {
        sensorId: 1,
        createdAt: {
          gte: new Date(Date.now() - 2 * 60 * 1000) // √öltimos 2 minutos
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 3
    });
    
    if (alertasRecientes.length > 0) {
      console.log(`  - ‚úÖ ${alertasRecientes.length} alertas recientes encontradas`);
      alertasRecientes.forEach(alerta => {
        console.log(`    ‚Ä¢ ${alerta.createdAt.toISOString()}: ${alerta.mensaje} (${alerta.estado})`);
      });
    } else {
      console.log('  - ‚è≥ No hay alertas recientes (esperando nueva lectura del ESP32)');
    }
    
    // 6. Estado final
    console.log('\nüîç ESTADO ACTUAL:');
    console.log('  - ‚úÖ Configuraci√≥n de alertas: COMPLETA');
    console.log('  - ‚úÖ Destinatarios: CONFIGURADOS');
    console.log('  - ‚úÖ Backend: CORRIENDO');
    console.log('  - üîß Servicio de notificaciones: CORREGIDO');
    console.log('  - üì§ Pr√≥ximo paso: Enviar lectura desde ESP32');
    
  } catch (error) {
    console.error('‚ùå Error en prueba de env√≠o directo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testEnvioDirecto();

