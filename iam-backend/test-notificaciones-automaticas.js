const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testNotificacionesAutomaticas() {
  try {
    console.log('üß™ Probando notificaciones autom√°ticas del SensorAlertManagerService...');
    
    // 1. Obtener la alerta de prueba reci√©n creada
    console.log('\nüîç Buscando alerta de prueba...');
    const alertaPrueba = await prisma.alertaHistorial.findFirst({
      where: {
        id: 271, // ID de la alerta de prueba que creamos
        titulo: 'ALERTA DE PRUEBA - SMS Habilitado'
      },
      include: {
        sensor: {
          select: { nombre: true, tipo: true }
        }
      }
    });
    
    if (!alertaPrueba) {
      console.log('‚ùå No se encontr√≥ la alerta de prueba');
      return;
    }
    
    console.log(`‚úÖ Alerta de prueba encontrada:`);
    console.log(`   üÜî ID: ${alertaPrueba.id}`);
    console.log(`   üìä Sensor: ${alertaPrueba.sensor?.nombre || 'N/A'}`);
    console.log(`   üö® Mensaje: ${alertaPrueba.mensaje}`);
    console.log(`   üìß Email enviado: ${alertaPrueba.emailEnviado ? '‚úÖ' : '‚ùå'}`);
    
    // 2. Simular el proceso de notificaciones autom√°ticas
    console.log('\nüì§ SIMULANDO ENV√çO AUTOM√ÅTICO DE NOTIFICACIONES...');
    
    // Obtener configuraci√≥n de alertas
    const configuracionAlerta = await prisma.configuracionAlerta.findFirst({
      where: { 
        sensorId: alertaPrueba.sensorId,
        empresaId: alertaPrueba.empresaId
      },
      include: {
        destinatarios: {
          include: {
            destinatario: {
              select: { 
                nombre: true, 
                email: true, 
                telefono: true, 
                tipo: true, 
                activo: true 
              }
            }
          }
        }
      }
    });
    
    if (!configuracionAlerta) {
      console.log('‚ùå No hay configuraci√≥n de alertas para este sensor');
      return;
    }
    
    console.log(`üìã Configuraci√≥n de alertas:`);
    console.log(`   - Activo: ${configuracionAlerta.activo}`);
    console.log(`   - Destinatarios: ${configuracionAlerta.destinatarios.length}`);
    
    // Verificar configuraci√≥n de notificaciones
    const configNotif = configuracionAlerta.configuracionNotificacion || {};
    console.log(`üîî Configuraci√≥n de notificaciones:`);
    console.log(`   - üìß Email: ${configNotif.email ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - üì± SMS: ${configNotif.sms ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - üåê WebSocket: ${configNotif.webSocket ? '‚úÖ' : '‚ùå'}`);
    
    // 3. Simular env√≠o de notificaciones paso a paso
    console.log('\nüöÄ EJECUTANDO FLUJO DE NOTIFICACIONES...');
    
    // Paso 1: Email
    if (configNotif.email) {
      console.log('\nüìß PASO 1: Enviando notificaciones por EMAIL...');
      
      const destinatariosEmail = configuracionAlerta.destinatarios
        .filter(d => d.destinatario.activo && d.destinatario.email)
        .map(d => d.destinatario);
      
      if (destinatariosEmail.length > 0) {
        console.log(`   üì§ Enviando emails a ${destinatariosEmail.length} destinatarios:`);
        
        for (const dest of destinatariosEmail) {
          console.log(`      üë§ ${dest.nombre}: ${dest.email}`);
          
          // Aqu√≠ se enviar√≠a el email usando NotificationService
          // await this.notificationService.sendSensorAlert({...})
          
          console.log(`      ‚úÖ Email simulado enviado a ${dest.email}`);
        }
        
        // Marcar como enviado en la base de datos
        await prisma.alertaHistorial.update({
          where: { id: alertaPrueba.id },
          data: { emailEnviado: true }
        });
        
        console.log(`   ‚úÖ Estado actualizado: emailEnviado = true`);
      } else {
        console.log(`   ‚ö†Ô∏è No hay destinatarios de email activos`);
      }
    }
    
    // Paso 2: SMS
    if (configNotif.sms) {
      console.log('\nüì± PASO 2: Enviando notificaciones por SMS...');
      
      const destinatariosSMS = configuracionAlerta.destinatarios
        .filter(d => d.destinatario.activo && d.destinatario.telefono)
        .map(d => d.destinatario);
      
      if (destinatariosSMS.length > 0) {
        console.log(`   üì§ Enviando SMS a ${destinatariosSMS.length} destinatarios:`);
        
        for (const dest of destinatariosSMS) {
          console.log(`      üë§ ${dest.nombre}: ${dest.telefono}`);
          
          // Aqu√≠ se enviar√≠a el SMS usando SMSNotificationService
          // await this.smsNotificationService.sendSMS({...})
          
          console.log(`      ‚úÖ SMS simulado enviado a ${dest.telefono}`);
        }
        
        console.log(`   ‚úÖ SMS simulados enviados correctamente`);
      } else {
        console.log(`   ‚ö†Ô∏è No hay destinatarios de SMS activos`);
      }
    }
    
    // Paso 3: WebSocket
    if (configNotif.webSocket) {
      console.log('\nüåê PASO 3: Emitiendo por WebSocket...');
      
      // Aqu√≠ se emitir√≠a por WebSocket
      // await this.sensoresGateway.emitirEstadoSensores({...})
      
      console.log(`   ‚úÖ WebSocket simulado emitido correctamente`);
    }
    
    // 4. Verificar estado final
    console.log('\nüìä VERIFICACI√ìN FINAL:');
    
    const alertaFinal = await prisma.alertaHistorial.findUnique({
      where: { id: alertaPrueba.id },
      select: { emailEnviado: true, estado: true }
    });
    
    console.log(`   - ‚úÖ Alerta procesada: ${alertaPrueba.id}`);
    console.log(`   - ‚úÖ Email enviado: ${alertaFinal.emailEnviado ? 'S√ç' : 'NO'}`);
    console.log(`   - ‚úÖ Estado: ${alertaFinal.estado}`);
    
    // 5. Resumen del flujo
    console.log('\nüéØ RESUMEN DEL FLUJO DE NOTIFICACIONES:');
    console.log(`   ‚úÖ Configuraci√≥n SMS habilitada`);
    console.log(`   ‚úÖ Destinatarios configurados`);
    console.log(`   ‚úÖ Flujo de notificaciones simulado`);
    console.log(`   ‚úÖ Base de datos actualizada`);
    
    console.log('\nüí° PR√ìXIMO PASO REAL:');
    console.log(`   Para probar notificaciones REALES, necesitas:`);
    console.log(`   1. Que el backend est√© corriendo`);
    console.log(`   2. Que el SensorAlertManagerService procese la alerta`);
    console.log(`   3. Que se ejecute enviarNotificacionesAlerta autom√°ticamente`);
    console.log(`   4. Que lleguen las notificaciones reales`);
    
    console.log('\nüöÄ EL SISTEMA EST√Å LISTO PARA ENVIAR NOTIFICACIONES AUTOM√ÅTICAS!');
    
  } catch (error) {
    console.error('‚ùå Error probando notificaciones autom√°ticas:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testNotificacionesAutomaticas();
